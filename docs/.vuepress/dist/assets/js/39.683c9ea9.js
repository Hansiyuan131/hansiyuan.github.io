(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{476:function(t,s,a){"use strict";a.r(s);var v=a(29),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"sql基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql基础"}},[t._v("#")]),t._v(" SQL基础")]),t._v(" "),a("h2",{attrs:{id:"sql基础语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql基础语句"}},[t._v("#")]),t._v(" SQL基础语句")]),t._v(" "),a("h3",{attrs:{id:"sql-语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-语法"}},[t._v("#")]),t._v(" SQL 语法")]),t._v(" "),a("h4",{attrs:{id:"数据库表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库表"}},[t._v("#")]),t._v(" 数据库表")]),t._v(" "),a("p",[t._v('一个数据库通常包含一个或多个表。每个表由一个名字标识（例如“客户”或者“订单”）。表包含带有数据\n的记录（行）。\n下面的例子是一个名为 "Persons" 的表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v("上面的表包含三条记录（每一条对应一个人）和五个列（Id、姓、名、地址和城市）。")]),t._v(" "),a("h4",{attrs:{id:"sql-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-语句"}},[t._v("#")]),t._v(" SQL 语句")]),t._v(" "),a("p",[t._v("您需要在数据库上执行的大部分工作都由 SQL 语句完成。")]),t._v(" "),a("p",[t._v("下面的语句从表中选取 LastName 列的数据：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" LastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Adams")])]),t._v(" "),a("tr",[a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")])])])]),t._v(" "),a("p",[a("strong",[t._v("SQL 对大小写不敏感！")])]),t._v(" "),a("p",[t._v("SQL 语句后面的分号？")]),t._v(" "),a("p",[t._v("某些数据库系统要求在每条 SQL 命令的末端使用分号。分号是在数据库系统中分隔每条 SQL 语句的标准方法，这样就可以在对服务器的相同请求中执行一条以上的语句。如果您使用的是"),a("code",[t._v("MS Access")]),t._v(" 和 "),a("code",[t._v("SQL Server 2000")]),t._v("，则不必在每条 SQL 语句之后使用分号，不过某些数据库软件要求必须使用分号。")]),t._v(" "),a("p",[a("strong",[t._v("SQL DML 和 DDL")])]),t._v(" "),a("p",[t._v("可以把 SQL 分为两个部分：数据操作语言 (DML) 和 数据定义语言 (DDL)。")]),t._v(" "),a("p",[t._v("SQL (结构化查询语言)是用于执行查询的语法。但是 SQL 语言也包含用于更新、插入和删除记录的语法。\n查询和更新指令构成了 SQL 的 DML 部分：· SELECT - 从数据库表中获取数据")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("UPDATE")]),t._v(" - 更新数据库表中的数据")]),t._v(" "),a("li",[a("code",[t._v("DELETE")]),t._v(" - 从数据库表中删除数据")]),t._v(" "),a("li",[a("code",[t._v("INSERT INTO")]),t._v(" - 向数据库表中插入数据")])]),t._v(" "),a("p",[t._v("SQL 的数据定义语言 (DDL) 部分使我们有能力创建或删除表格。我们也可以定义索引（键），规定表之\n间的链接，以及施加表间的约束。")]),t._v(" "),a("p",[t._v("SQL 中最重要的 DDL 语句:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("CREATE DATABASE")]),t._v(" - 创建新数据库")]),t._v(" "),a("li",[a("code",[t._v("ALTER DATABASE")]),t._v(" - 修改数据库")]),t._v(" "),a("li",[a("code",[t._v("CREATE TABLE")]),t._v(" - 创建新表")]),t._v(" "),a("li",[a("code",[t._v("ALTER TABLE")]),t._v(" - 变更（改变）数据库表")]),t._v(" "),a("li",[a("code",[t._v("DROP TABLE")]),t._v(" - 删除表")]),t._v(" "),a("li",[a("code",[t._v("CREATE INDEX")]),t._v(" - 创建索引（搜索键）")]),t._v(" "),a("li",[a("code",[t._v("DROP INDEX")]),t._v(" - 删除索引")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-select-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-select-语句"}},[t._v("#")]),t._v(" SQL SELECT 语句")]),t._v(" "),a("p",[t._v("SELECT 语句用于从表中选取数据。结果被存储在一个结果表中（称为结果集）。")]),t._v(" "),a("p",[t._v("SQL SELECT 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" 列名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名称\n")])])]),a("p",[t._v("以及：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名称\n注释："),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" 语句对大小写不敏感。"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" 等效于 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v("。\n")])])]),a("p",[t._v("SQL SELECT 实例")]),t._v(" "),a("p",[t._v('如需获取名为 "LastName" 和 "FirstName" 的列的内容（从名为 "Persons" 的数据库表），请使用类似这样的 SELECT 语句：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("FirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons\n")])])]),a("p",[t._v('"Persons" 表:')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")])]),t._v(" "),a("tr",[a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")])])])]),t._v(" "),a("p",[t._v("SQL SELECT * 实例")]),t._v(" "),a("p",[t._v('现在我们希望从 "Persons" 表中选取所有的列。提示：星号（*）是选取所有列的快捷方式。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v("在结果集（result-set）中导航"),a("br"),t._v("\n由 SQL 查询程序获得的结果被存放在一个结果集中。大多数数据库软件系统都允许使用编程函数在结果\n集中进行导航，比如："),a("code",[t._v("Move-To-First-Record")]),t._v("、"),a("code",[t._v("Get-Record-Content")]),t._v("、"),a("code",[t._v("Move-To-Next-Record")]),t._v(" 等等。")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-select-distinct-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-select-distinct-语句"}},[t._v("#")]),t._v(" SQL SELECT DISTINCT 语句")]),t._v(" "),a("p",[t._v("在表中，可能会包含重复值。这并不成问题，不过，有时您也许希望仅仅列出不同（distinct）的值。"),a("br"),t._v("\n关键词 DISTINCT 用于返回唯一不同的值。"),a("br"),t._v("\n语法：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DISTINCT")]),t._v(" 列名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名称\n")])])]),a("p",[t._v("使用 DISTINCT 关键词"),a("br"),t._v('\n如果要从 "Company" 列中选取所有的值，我们需要使用 SELECT 语句：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Company "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders\n")])])]),a("p",[t._v('"Orders"表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Company")]),t._v(" "),a("th",[t._v("OrderNumber")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("IBM")]),t._v(" "),a("td",[t._v("3532")])]),t._v(" "),a("tr",[a("td",[t._v("W3CSchool")]),t._v(" "),a("td",[t._v("2356")])]),t._v(" "),a("tr",[a("td",[t._v("Apple")]),t._v(" "),a("td",[t._v("4698")])]),t._v(" "),a("tr",[a("td",[t._v("W3CSchool")]),t._v(" "),a("td",[t._v("6953")])])])]),t._v(" "),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Company")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("IBM")])]),t._v(" "),a("tr",[a("td",[t._v("W3CSchool")])]),t._v(" "),a("tr",[a("td",[t._v("Apple")])]),t._v(" "),a("tr",[a("td",[t._v("W3CSchool")])])])]),t._v(" "),a("p",[t._v('请注意，在结果集中，W3CSchool 被列出了两次。\n如需从 Company" 列中仅选取唯一不同的值，我们需要使用 SELECT DISTINCT 语句：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DISTINCT")]),t._v(" Company "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Company")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("IBM")])]),t._v(" "),a("tr",[a("td",[t._v("W3CSchool")])]),t._v(" "),a("tr",[a("td",[t._v("Apple")])])])]),t._v(" "),a("p",[t._v('现在，在结果集中，"W3CSchool" 仅被列出了一次。')]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"where-子句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#where-子句"}},[t._v("#")]),t._v(" WHERE 子句")]),t._v(" "),a("p",[t._v("如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句。"),a("br"),t._v("\n语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" 列名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" 列 运算符 值\n")])])]),a("p",[t._v("下面的运算符可在 WHERE 子句中使用：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("操作符")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("=")]),t._v(" "),a("td",[t._v("等于")])]),t._v(" "),a("tr",[a("td",[t._v("<>")]),t._v(" "),a("td",[t._v("不等于")])]),t._v(" "),a("tr",[a("td",[t._v(">")]),t._v(" "),a("td",[t._v("大于")])]),t._v(" "),a("tr",[a("td",[t._v("<")]),t._v(" "),a("td",[t._v("小于")])]),t._v(" "),a("tr",[a("td",[t._v(">=")]),t._v(" "),a("td",[t._v("大于等于")])]),t._v(" "),a("tr",[a("td",[t._v("<=")]),t._v(" "),a("td",[t._v("小于等于")])]),t._v(" "),a("tr",[a("td",[t._v("BETWEEN")]),t._v(" "),a("td",[t._v("在某个范围内")])]),t._v(" "),a("tr",[a("td",[t._v("LIKE")]),t._v(" "),a("td",[t._v("搜索某种模式")])])])]),t._v(" "),a("p",[t._v("注释：在某些版本的 SQL 中，操作符 <> 可以写为 !=。")]),t._v(" "),a("p",[t._v("使用 WHERE 子句")]),t._v(" "),a("p",[t._v('如果只希望选取居住在城市 "Beijing" 中的人，我们需要向 SELECT 语句添加 WHERE 子句：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" City"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Beijing'")]),t._v("\n")])])]),a("p",[t._v('"Persons" 表')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")]),t._v(" "),a("th",[t._v("Year")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")]),t._v(" "),a("td",[t._v("1970")])]),t._v(" "),a("tr",[a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")]),t._v(" "),a("td",[t._v("1975")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")]),t._v(" "),a("td",[t._v("1980")])]),t._v(" "),a("tr",[a("td",[t._v("Gates")]),t._v(" "),a("td",[t._v("Bill")]),t._v(" "),a("td",[t._v("Xuanwumen 10")]),t._v(" "),a("td",[t._v("Beijing")]),t._v(" "),a("td",[t._v("1985")])])])]),t._v(" "),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")]),t._v(" "),a("th",[t._v("Year")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")]),t._v(" "),a("td",[t._v("1980")])]),t._v(" "),a("tr",[a("td",[t._v("Gates")]),t._v(" "),a("td",[t._v("Bill")]),t._v(" "),a("td",[t._v("Xuanwumen 10")]),t._v(" "),a("td",[t._v("Beijing")]),t._v(" "),a("td",[t._v("1985")])])])]),t._v(" "),a("p",[t._v("引号的使用(请注意，我们在例子中的条件值周围使用的是单引号。)")]),t._v(" "),a("p",[t._v("SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。如果是数值，请不要使用引号。"),a("br"),t._v("\n文本值：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("这是正确的：\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" FirstName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Bush'")]),t._v("\n这是错误的：\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" FirstName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Bush\n")])])]),a("p",[t._v("数值：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("这是正确的：\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Year")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1965")]),t._v("\n这是错误的：\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Year")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1965'")]),t._v("\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"and-和-or-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#and-和-or-运算符"}},[t._v("#")]),t._v(" AND 和 OR 运算符")]),t._v(" "),a("p",[t._v("AND 和 OR 运算符用于基于一个以上的条件对记录进行过滤。")]),t._v(" "),a("p",[t._v("AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来。")]),t._v(" "),a("p",[t._v("如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。"),a("br"),t._v("\n如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。")]),t._v(" "),a("p",[t._v("原始的表 (用在例子中的)：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("William")]),t._v(" "),a("td",[t._v("Xuanwumen 10")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v("AND 运算符实例")]),t._v(" "),a("p",[t._v('使用 AND 来显示所有姓为 "Carter" 并且名为 "Thomas" 的人：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" FirstName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Thomas'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" LastName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Carter'")]),t._v("\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v('OR 运算符实例\n使用 OR 来显示所有姓为 "Carter" 或者名为 "Thomas" 的人：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" firstname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Thomas'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" lastname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Carter'")]),t._v("\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("William")]),t._v(" "),a("td",[t._v("Xuanwumen 10")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v("结合 AND 和 OR 运算符"),a("br"),t._v("\n我们也可以把 AND 和 OR 结合起来（使用圆括号来组成复杂的表达式）:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FirstName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Thomas'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" FirstName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'William'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" LastName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Carter'")]),t._v("\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("William")]),t._v(" "),a("td",[t._v("Xuanwumen 10")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"order-by-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#order-by-语句"}},[t._v("#")]),t._v(" ORDER BY 语句")]),t._v(" "),a("p",[t._v("ORDER BY 语句用于对结果集进行排序。")]),t._v(" "),a("p",[t._v("ORDER BY 语句用于根据指定的列对结果集进行排序。ORDER BY 语句默认按照升序对记录进行排序。\n如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。")]),t._v(" "),a("p",[t._v("Orders 表:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Company")]),t._v(" "),a("th",[t._v("OrderNumber")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("IBM")]),t._v(" "),a("td",[t._v("3532")])]),t._v(" "),a("tr",[a("td",[t._v("W3CSchool")]),t._v(" "),a("td",[t._v("2356")])]),t._v(" "),a("tr",[a("td",[t._v("Apple")]),t._v(" "),a("td",[t._v("4698")])]),t._v(" "),a("tr",[a("td",[t._v("W3CSchool")]),t._v(" "),a("td",[t._v("6953")])])])]),t._v(" "),a("p",[t._v("以字母顺序显示公司名称：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Company"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" OrderNumber "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Company\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Company")]),t._v(" "),a("th",[t._v("OrderNumber")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Apple")]),t._v(" "),a("td",[t._v("4698")])]),t._v(" "),a("tr",[a("td",[t._v("IBM")]),t._v(" "),a("td",[t._v("3532")])]),t._v(" "),a("tr",[a("td",[t._v("W3CSchool")]),t._v(" "),a("td",[t._v("6953")])]),t._v(" "),a("tr",[a("td",[t._v("W3CSchool")]),t._v(" "),a("td",[t._v("2356")])])])]),t._v(" "),a("p",[t._v("以字母顺序显示公司名称（Company），并以数字顺序显示顺序号（OrderNumber）：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Company"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" OrderNumber "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Company"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" OrderNumber\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Company")]),t._v(" "),a("th",[t._v("OrderNumber")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Apple 4698IBM")]),t._v(" "),a("td",[t._v("3532")])]),t._v(" "),a("tr",[a("td",[t._v("W3CSchool")]),t._v(" "),a("td",[t._v("2356")])]),t._v(" "),a("tr",[a("td",[t._v("W3CSchool")]),t._v(" "),a("td",[t._v("6953")])])])]),t._v(" "),a("p",[t._v("以逆字母顺序显示公司名称：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Company"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" OrderNumber "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Company "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),t._v("\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Company")]),t._v(" "),a("th",[t._v("OrderNumber")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("W3CSchool")]),t._v(" "),a("td",[t._v("6953")])]),t._v(" "),a("tr",[a("td",[t._v("W3CSchool")]),t._v(" "),a("td",[t._v("2356")])]),t._v(" "),a("tr",[a("td",[t._v("IBM")]),t._v(" "),a("td",[t._v("3532")])]),t._v(" "),a("tr",[a("td",[t._v("Apple")]),t._v(" "),a("td",[t._v("4698")])])])]),t._v(" "),a("p",[t._v("以逆字母顺序显示公司名称，并以数字顺序显示顺序号：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Company"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" OrderNumber "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Company "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nOrderNumber "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),t._v("\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Company")]),t._v(" "),a("th",[t._v("OrderNumber")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("W3CSchool")]),t._v(" "),a("td",[t._v("2356")])]),t._v(" "),a("tr",[a("td",[t._v("W3CSchool")]),t._v(" "),a("td",[t._v("6953")])]),t._v(" "),a("tr",[a("td",[t._v("IBM")]),t._v(" "),a("td",[t._v("3532")])]),t._v(" "),a("tr",[a("td",[t._v("Apple")]),t._v(" "),a("td",[t._v("4698")])])])]),t._v(" "),a("p",[t._v("注意：在以上的结果中有两个相等的公司名称 (W3CSchool)。只有这一次，在第一列中有相同的值时，第二列是以升序排列的。如果第一列中有些值为 nulls 时，情况也是这样的。")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"insert-into-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#insert-into-语句"}},[t._v("#")]),t._v(" INSERT INTO 语句")]),t._v(" "),a("p",[t._v("INSERT INTO 语句用于向表格中插入新的行。")]),t._v(" "),a("p",[t._v("语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" 表名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("值 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 值 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("我们也可以指定所要插入数据的列：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 列 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("值 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 值 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("插入新的行")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v("SQL 语句：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Gates'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Bill'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Xuanwumen 10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Beijing'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])]),t._v(" "),a("tr",[a("td",[t._v("Gates")]),t._v(" "),a("td",[t._v("Bill")]),t._v(" "),a("td",[t._v("Xuanwumen 10")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v("在指定的列中插入数据")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])]),t._v(" "),a("tr",[a("td",[t._v("Gates")]),t._v(" "),a("td",[t._v("Bill")]),t._v(" "),a("td",[t._v("Xuanwumen 10")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v("SQL 语句：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Wilson'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Champs-Elysees'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])]),t._v(" "),a("tr",[a("td",[t._v("Gates")]),t._v(" "),a("td",[t._v("Bill")]),t._v(" "),a("td",[t._v("Xuanwumen 10")]),t._v(" "),a("td",[t._v("Beijing")])]),t._v(" "),a("tr",[a("td",[t._v("Wilson")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Champs-Elysees")]),t._v(" "),a("td")])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"update-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-语句"}},[t._v("#")]),t._v(" Update 语句")]),t._v(" "),a("p",[t._v("Update 语句用于修改表中的数据。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" 表名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" 列名称 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 新值 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" 列名称 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 某值\n")])])]),a("p",[t._v("Person:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Gates")]),t._v(" "),a("td",[t._v("Bill")]),t._v(" "),a("td",[t._v("Xuanwumen 10")]),t._v(" "),a("td",[t._v("Beijing")])]),t._v(" "),a("tr",[a("td",[t._v("Wilson")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Champs-Elysees")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("更新某一行中的一个列")]),t._v(" "),a("p",[t._v('我们为 lastname 是 "Wilson" 的人添加 firstname：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" Person "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" FirstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Fred'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" LastName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Wilson'")]),t._v("\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Gates")]),t._v(" "),a("td",[t._v("Bill")]),t._v(" "),a("td",[t._v("Xuanwumen 10")]),t._v(" "),a("td",[t._v("Beijing")])]),t._v(" "),a("tr",[a("td",[t._v("Wilson")]),t._v(" "),a("td",[t._v("Fred")]),t._v(" "),a("td",[t._v("Champs-Elysees")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("更新某一行中的若干列")]),t._v(" "),a("p",[t._v("我们会修改地址（address），并添加城市名称（city）：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" Person "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" Address "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Zhongshan 23'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" City "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Nanjing'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" LastName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Wilson'")]),t._v("\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Gates")]),t._v(" "),a("td",[t._v("Bill")]),t._v(" "),a("td",[t._v("Xuanwumen 10")]),t._v(" "),a("td",[t._v("Beijing")])]),t._v(" "),a("tr",[a("td",[t._v("Wilson")]),t._v(" "),a("td",[t._v("Fred")]),t._v(" "),a("td",[t._v("Zhongshan 23")]),t._v(" "),a("td",[t._v("Nanjing")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"delete-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete-语句"}},[t._v("#")]),t._v(" DELETE 语句")]),t._v(" "),a("p",[t._v("DELETE 语句用于删除表中的行。")]),t._v(" "),a("p",[t._v("语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名称 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" 列名称 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 值\n")])])]),a("p",[t._v("Person:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Gates")]),t._v(" "),a("td",[t._v("Bill")]),t._v(" "),a("td",[t._v("Xuanwumen 10")]),t._v(" "),a("td",[t._v("Beijing")])]),t._v(" "),a("tr",[a("td",[t._v("Wilson")]),t._v(" "),a("td",[t._v("Fred")]),t._v(" "),a("td",[t._v("Zhongshan 23")]),t._v(" "),a("td",[t._v("Nanjing")])])])]),t._v(" "),a("p",[t._v("删除某行")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Fred Wilson"')]),t._v(" 会被删除："),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Person "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" LastName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Wilson'")]),t._v("\n")])])]),a("p",[t._v("结果:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Gates")]),t._v(" "),a("td",[t._v("Bill")]),t._v(" "),a("td",[t._v("Xuanwumen 10")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v("删除所有行")]),t._v(" "),a("p",[t._v("可以在不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("p",[t._v("或者：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"sql高级语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql高级语句"}},[t._v("#")]),t._v(" SQL高级语句")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"top-子句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#top-子句"}},[t._v("#")]),t._v(" TOP 子句")]),t._v(" "),a("p",[a("strong",[t._v("TOP 子句用于规定要返回的记录的数目。对于拥有数千条记录的大型表来说，TOP 子句是非常有用的。")])]),t._v(" "),a("p",[t._v("注释：并非所有的数据库系统都支持 TOP 子句。")]),t._v(" "),a("p",[t._v("SQL Server 的语法：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TOP")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("percent")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("p",[t._v("MySQL 和 Oracle 中的 SQL SELECT TOP 是等价的\n"),t._v("\nMySQL 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" number\n")])])]),a("p",[t._v("例子")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),a("p",[t._v("Oracle 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" ROWNUM "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" number\n")])])]),a("p",[t._v("例子")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" ROWNUM "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),a("p",[t._v("Persons 表:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("Obama")]),t._v(" "),a("td",[t._v("Barack")]),t._v(" "),a("td",[t._v("Pennsylvania Avenue")]),t._v(" "),a("td",[t._v("Washington")])])])]),t._v(" "),a("p",[t._v("SQL TOP 实例")]),t._v(" "),a("p",[t._v('现在，我们希望从上面的 "Persons" 表中选取头两条记录。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TOP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])])])]),t._v(" "),a("p",[t._v("SQL TOP PERCENT 实例")]),t._v(" "),a("p",[t._v('现在，我们希望从上面的 "Persons" 表中选取 50% 的记录。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TOP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PERCENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-like"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-like"}},[t._v("#")]),t._v(" SQL like")]),t._v(" "),a("p",[a("strong",[t._v("LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。")])]),t._v(" "),a("p",[t._v("LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。")]),t._v(" "),a("p",[t._v("SQL LIKE 操作符语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" column_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" pattern\n")])])]),a("p",[t._v("Persons 表:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Addressv")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v("LIKE 操作符实例")]),t._v(" "),a("p",[t._v('现在，我们希望从上面的 "Persons" 表中选取居住在以 "N" 开始的城市里的人：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" PersonsWHERE City "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'N%'")]),t._v("\n提示："),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%"')]),t._v(" 可用于定义通配符（模式中缺少的字母）。\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenuev")]),t._v(" "),a("td",[t._v("New York")])])])]),t._v(" "),a("p",[t._v('接下来，我们希望从 "Persons" 表中选取居住在以 "g" 结尾的城市里的人：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" City "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%g'")]),t._v("\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("3 vCarter vThomasv Changan Street")]),t._v(" "),a("td",[t._v("Beijing")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v('接下来，我们希望从 "Persons" 表中选取居住在包含 "lon" 的城市里的人：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" City "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%lon%'")]),t._v("\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])])])]),t._v(" "),a("p",[t._v('通过使用 NOT 关键字，我们可以从 "Persons" 表中选取居住在不包含 "lon" 的城市里的人：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" City "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%lon%'")]),t._v("\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-通配符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-通配符"}},[t._v("#")]),t._v(" SQL 通配符")]),t._v(" "),a("p",[a("strong",[t._v("在搜索数据库中的数据时，SQL 通配符可以替代一个或多个字符。SQL 通配符必须与 LIKE 运算符一起使用。")])]),t._v(" "),a("p",[t._v("在 SQL 中，可使用以下通配符：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("通配符")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("%")]),t._v(" "),a("td",[t._v("替代一个或多个字符")])]),t._v(" "),a("tr",[a("td",[t._v("_")]),t._v(" "),a("td",[t._v("仅替代一个字符")])]),t._v(" "),a("tr",[a("td",[t._v("[charlist][^charlist]或者[!charlist]")]),t._v(" "),a("td",[t._v("字符列中的任何单一字符")])])])]),t._v(" "),a("p",[t._v("不在字符列中的任何单一字符")]),t._v(" "),a("p",[t._v("Persons 表:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("h4",{attrs:{id:"使用-通配符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-通配符"}},[t._v("#")]),t._v(" 使用 % 通配符")]),t._v(" "),a("p",[t._v('现在，我们希望从上面的 "Persons" 表中选取居住在以 "Ne" 开始的城市里的人：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" City "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ne%'")]),t._v("\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])])])]),t._v(" "),a("p",[t._v('接下来，我们希望从 "Persons" 表中选取居住在包含 "lond" 的城市里的人：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" City "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%lond%'")]),t._v("\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])])])]),t._v(" "),a("h5",{attrs:{id:"使用-通配符-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-通配符-2"}},[t._v("#")]),t._v(" 使用 _ 通配符")]),t._v(" "),a("p",[t._v('现在，我们希望从上面的 "Persons" 表中选取名字的第一个字符之后是 "eorge" 的人：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" FirstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'_eorge'")]),t._v("\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])])])]),t._v(" "),a("p",[t._v('接下来，我们希望从 "Persons" 表中选取的这条记录的姓氏以 "C" 开头，然后是一个任意字符，然后是"r"，然后是任意字符，然后是 "er"：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" LastName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C_r_er'")]),t._v("\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("h5",{attrs:{id:"使用-charlist-通配符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-charlist-通配符"}},[t._v("#")]),t._v(" 使用 [charlist] 通配符")]),t._v(" "),a("p",[t._v('现在，我们希望从上面的 "Persons" 表中选取居住的城市以 "A" 或 "L" 或 "N" 开头的人：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" City "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[ALN]%'")]),t._v("\n\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])])])]),t._v(" "),a("p",[t._v('现在，我们希望从上面的 "Persons" 表中选取居住的城市不以 "A" 或 "L" 或 "N" 开头的人：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" PersonsWHERE City "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[!ALN]%'")]),t._v("\n\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-in"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-in"}},[t._v("#")]),t._v(" SQL in")]),t._v(" "),a("p",[t._v("IN 操作符允许我们在 WHERE 子句中规定多个值。")]),t._v(" "),a("p",[t._v("SQL IN 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" column_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("value2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("Persons 表:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v("现在，我们希望从上表中选取姓氏为 Adams 和 Carter 的人：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" LastName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Adams'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Carter'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-between"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-between"}},[t._v("#")]),t._v(" SQL between")]),t._v(" "),a("p",[t._v("BETWEEN 操作符在 WHERE 子句中使用，作用是选取介于两个值之间的数据范围。操作符 BETWEEN ... AND 会选取介于两个值之间的数据范围。这些值可以是数值、文本或者日期。")]),t._v(" "),a("p",[t._v("SQL BETWEEN 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" column_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("BETWEEN")]),t._v(" value1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" value2\n\n")])])]),a("p",[t._v("Persons 表:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("Gates")]),t._v(" "),a("td",[t._v("Bill")]),t._v(" "),a("td",[t._v("Xuanwumen 10")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v('如需以字母顺序显示介于 **"Adams"（包括）和 "Carter"（不包括）**之间的人，请使用下面的 SQL：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" PersonsWHERE LastName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("BETWEEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Adams'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Carter'")]),t._v("\n\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])])])]),t._v(" "),a("p",[t._v('重要事项：不同的数据库对 BETWEEN...AND 操作符的处理方式是有差异的。某些数据库会列出介于"Adams" 和 "Carter" 之间的人，但不包括 "Adams" 和 "Carter" ；某些数据库会列出介于 "Adams"和 "Carter" 之间并包括 "Adams" 和 "Carter" 的人；而另一些数据库会列出介于 "Adams" 和"Carter" 之间的人，包括 "Adams" ，但不包括 "Carter" 。所以，请检查你的数据库是如何处理BETWEEN....AND 操作符的！')]),t._v(" "),a("p",[t._v("如需使用上面的例子显示范围之外的人，请使用 NOT 操作符：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" LastName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("BETWEEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Adams'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Carter'")]),t._v("\n\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("Gates")]),t._v(" "),a("td",[t._v("Bill")]),t._v(" "),a("td",[t._v("Xuanwumen 10")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-alias-别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-alias-别名"}},[t._v("#")]),t._v(" SQL Alias(别名)")]),t._v(" "),a("p",[t._v("通过使用 SQL，可以为列名称和表名称指定别名（Alias）。")]),t._v(" "),a("p",[t._v("表的 SQL Alias 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" alias_name\n\n")])])]),a("p",[t._v("列的 SQL Alias 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" alias_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n\n")])])]),a("p",[t._v('假设我们有两个表分别是："Persons" 和 "Product_Orders"。我们分别为它们指定别名 "p" 和 "po"。\n现在，我们希望列出 "John Adams" 的所有定单。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" po"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FirstName\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Product_Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" po\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Adams'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FirstName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'John'")]),t._v("\n\n")])])]),a("p",[t._v("不使用别名的 SELECT 语句：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Product_Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FirstName\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Product_Orders\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Adams'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FirstName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'John'")]),t._v("\n\n")])])]),a("p",[t._v("使用一个列名别名\n表 Persons:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v("SQL:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" LastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" Family"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" Name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons\n\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Family")]),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")])]),t._v(" "),a("tr",[a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-join"}},[t._v("#")]),t._v(" SQL join")]),t._v(" "),a("p",[t._v("SQL join 用于根据两个或多个表中的列之间的关系，从这些表中查询数据。")]),t._v(" "),a("p",[t._v("Join 和 Key")]),t._v(" "),a("p",[t._v("有时为了得到完整的结果，我们需要从两个或更多的表中获取结果。我们就需要执行 join。数据库中的表可通过键将彼此联系起来。主键（Primary Key）是一个列，在这个列中的每一行的值都是唯一的。在表中，每个主键的值都是唯一的。这样做的目的是在不重复每个表中的所有数据的情况下，把表间的数据交叉捆绑在一起。")]),t._v(" "),a("p",[t._v('"Persons" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id_P")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v('请注意，"Id_P" 列是 Persons 表中的的主键。这意味着没有两行能够拥有相同的 Id_P。即使两个人的\n姓名完全相同，Id_P 也可以区分他们。')]),t._v(" "),a("p",[t._v('接下来请看 "Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id_O")]),t._v(" "),a("th",[t._v("OrderNo")]),t._v(" "),a("th",[t._v("Id_P")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("77895")]),t._v(" "),a("td",[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("44678")]),t._v(" "),a("td",[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("22456")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("24562")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("34764")]),t._v(" "),a("td",[t._v("65")])])])]),t._v(" "),a("p",[t._v('请注意，"Id_O" 列是 Orders 表中的的主键，同时，"Orders" 表中的 "Id_P" 列用于引用"Persons"表中的人，而无需使用他们的确切姓名。')]),t._v(" "),a("p",[t._v('请留意，"Id_P" 列把上面的两个表联系了起来。我们可以通过引用两个表的方式，从两个表中获取数据：')]),t._v(" "),a("p",[t._v("谁订购了产品，并且他们订购了什么产品？")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderNo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id_P "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id_P\n\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("OrderNo")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("22456")])]),t._v(" "),a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("24562")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("77895")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("44678")])])])]),t._v(" "),a("p",[t._v("除了上面的方法，我们也可以使用关键词 JOIN 来从两个表中获取数据。")]),t._v(" "),a("p",[t._v("如果我们希望列出所有人的定购，可以使用下面的 SELECT 语句：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderNo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id_P "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id_P\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName\n\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("OrderNo")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("22456")])]),t._v(" "),a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("24562")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("77895")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("44678")])])])]),t._v(" "),a("p",[t._v("不同的 SQL JOIN 除了我们在上面的例子中使用的 INNER JOIN（内连接），我们还可以其他几种连接。")]),t._v(" "),a("p",[t._v("下面列出了您可以使用的 JOIN 类型，以及它们之间的差异。")]),t._v(" "),a("ul",[a("li",[t._v("JOIN: 如果表中有至少一个匹配，则返回行")]),t._v(" "),a("li",[t._v("LEFT JOIN: 即使右表中没有匹配，也从左表返回所有的行")]),t._v(" "),a("li",[t._v("RIGHT JOIN: 即使左表中没有匹配，也从右表返回所有的行")]),t._v(" "),a("li",[t._v("FULL JOIN: 只要其中一个表中存在匹配，就返回行")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-inner-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-inner-join"}},[t._v("#")]),t._v(" SQL inner join")]),t._v(" "),a("p",[t._v("在表中存在至少一个匹配时，INNER JOIN 关键字返回行。")]),t._v(" "),a("p",[t._v("INNER JOIN 关键字语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name1\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" table_name2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" table_name1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("table_name2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("column_name\n注释："),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" 与 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" 是相同的。\n\n")])])]),a("p",[t._v('原始的表 (用在例子中的)：\n"Persons" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id_P")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v('"Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id_O")]),t._v(" "),a("th",[t._v("OrderNo")]),t._v(" "),a("th",[t._v("Id_P")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("77895")]),t._v(" "),a("td",[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("44678")]),t._v(" "),a("td",[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("22456")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("24562")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("34764")]),t._v(" "),a("td",[t._v("65")])])])]),t._v(" "),a("p",[t._v("内连接（INNER JOIN）实例\n现在，我们希望列出所有人的定购。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderNo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id_P\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName\n\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("OrderNo")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("22456")])]),t._v(" "),a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("24562")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("77895")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("44678")])])])]),t._v(" "),a("p",[t._v('INNER JOIN 关键字在表中存在至少一个匹配时返回行。如果 "Persons" 中的行在 "Orders" 中没有匹\n配，就不会列出这些行。')]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-left-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-left-join"}},[t._v("#")]),t._v(" SQL LEFT join")]),t._v(" "),a("p",[t._v("LEFT JOIN 关键字会从左表 (table_name1) 那里返回所有的行，即使在右表 (table_name2) 中没有\n匹配的行。")]),t._v(" "),a("p",[t._v("LEFT JOIN 关键字语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name1\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" table_name2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" table_name1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("table_name2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("column_name\n注释：在某些数据库中， "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" 称为 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OUTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v("。\n\n")])])]),a("p",[t._v('"Persons" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id_P")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v('"Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id_O")]),t._v(" "),a("th",[t._v("OrderNo")]),t._v(" "),a("th",[t._v("Id_P")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("77895")]),t._v(" "),a("td",[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("44678")]),t._v(" "),a("td",[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("22456")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("24562")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("34764")]),t._v(" "),a("td",[t._v("65")])])])]),t._v(" "),a("p",[t._v("左连接（LEFT JOIN）实例\n现在，我们希望列出所有的人，以及他们的定购 - 如果有的话。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderNo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id_P \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName\n\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("OrderNo")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("22456")])]),t._v(" "),a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("24562")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("77895")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("44678")])]),t._v(" "),a("tr",[a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("LEFT JOIN 关键字会从左表 (Persons) 那里返回所有的行，即使在右表 (Orders) 中没有匹配的行。")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-right-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-right-join"}},[t._v("#")]),t._v(" SQL right join")]),t._v(" "),a("p",[t._v("RIGHT JOIN 关键字会右表 (table_name2) 那里返回所有的行，即使在左表 (table_name1) 中没有")]),t._v(" "),a("p",[t._v("匹配的行。RIGHT JOIN 关键字语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name1\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RIGHT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" table_name2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" table_name1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("table_name2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("column_name\n注释：在某些数据库中， "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RIGHT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" 称为 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RIGHT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OUTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v("。\n\n")])])]),a("p",[t._v('原始的表 (用在例子中的)：\n"Persons" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id_P")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v('"Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id_O")]),t._v(" "),a("th",[t._v("OrderNo")]),t._v(" "),a("th",[t._v("Id_P")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("77895")]),t._v(" "),a("td",[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("44678")]),t._v(" "),a("td",[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("22456")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("24562")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("34764")]),t._v(" "),a("td",[t._v("65")])])])]),t._v(" "),a("p",[t._v("右连接（RIGHT JOIN）实例\n现在，我们希望列出所有的定单，以及定购它们的人 - 如果有的话。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderNo\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RIGHT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" OrdersON Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id_P\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName\n\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("OrderNo")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("22456")])]),t._v(" "),a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("24562")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("77895")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("44678")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("34764")])])])]),t._v(" "),a("p",[t._v("RIGHT JOIN 关键字会从右表 (Orders) 那里返回所有的行，即使在左表 (Persons) 中没有匹配的行。")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-full-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-full-join"}},[t._v("#")]),t._v(" SQL full join")]),t._v(" "),a("p",[t._v("只要其中某个表存在匹配，FULL JOIN 关键字就会返回行。")]),t._v(" "),a("p",[t._v("FULL JOIN 关键字语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name1\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" table_name2\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" table_name1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("table_name2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("column_name\n注释：在某些数据库中， "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" 称为 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OUTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v("。\n\n")])])]),a("p",[t._v('原始的表 (用在例子中的)：\n"Persons" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id_P")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v('"Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id_O")]),t._v(" "),a("th",[t._v("OrderNo")]),t._v(" "),a("th",[t._v("Id_P")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("77895")]),t._v(" "),a("td",[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("44678")]),t._v(" "),a("td",[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("22456")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("24562")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("34764")]),t._v(" "),a("td",[t._v("65")])])])]),t._v(" "),a("p",[t._v("全连接（FULL JOIN）实例\n现在，我们希望列出所有的人，以及他们的定单，以及所有的定单，以及定购它们的人。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderNo\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id_P\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName\n\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("OrderNo")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("22456")])]),t._v(" "),a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("24562")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("77895")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("44678")])]),t._v(" "),a("tr",[a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("34764")])])])]),t._v(" "),a("p",[t._v('FULL JOIN 关键字会从左表 (Persons) 和右表 (Orders) 那里返回所有的行。如果 "Persons" 中的行在表 "Orders" 中没有匹配，或者如果 "Orders" 中的行在表 "Persons" 中没有匹配，这些行同样会列出。')]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-union"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-union"}},[t._v("#")]),t._v(" SQL union")]),t._v(" "),a("p",[t._v("SQL UNION 操作符")]),t._v(" "),a("p",[t._v("UNION 操作符用于合并两个或多个 SELECT 语句的结果集。请注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。")]),t._v(" "),a("p",[t._v("SQL UNION 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name1\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNION")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name2\n注释：默认地，"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNION")]),t._v(" 操作符选取不同的值。如果允许重复的值，请使用 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALL")]),t._v("。\n\n")])])]),a("p",[t._v("SQL UNION ALL 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name1\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALL")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name2\n\n")])])]),a("p",[t._v("另外，UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列名。")]),t._v(" "),a("p",[t._v("下面的例子中使用的原始表：")]),t._v(" "),a("p",[t._v("Employees_China:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("E_ID")]),t._v(" "),a("th",[t._v("E_Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("01")]),t._v(" "),a("td",[t._v("Zhang, Hua")])]),t._v(" "),a("tr",[a("td",[t._v("02")]),t._v(" "),a("td",[t._v("Wang, Wei")])]),t._v(" "),a("tr",[a("td",[t._v("03")]),t._v(" "),a("td",[t._v("Carter, Thomas")])]),t._v(" "),a("tr",[a("td",[t._v("04")]),t._v(" "),a("td",[t._v("Yang, Ming")])])])]),t._v(" "),a("p",[t._v("Employees_USA:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("E_ID")]),t._v(" "),a("th",[t._v("E_Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("01")]),t._v(" "),a("td",[t._v("Adams, John")])]),t._v(" "),a("tr",[a("td",[t._v("02")]),t._v(" "),a("td",[t._v("Bush, George")])]),t._v(" "),a("tr",[a("td",[t._v("03")]),t._v(" "),a("td",[t._v("Carter, Thomas")])]),t._v(" "),a("tr",[a("td",[t._v("04")]),t._v(" "),a("td",[t._v("Gates, Bill")])])])]),t._v(" "),a("p",[t._v("使用 UNION 命令\n列出所有在中国和美国的不同的雇员名：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" E_Name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Employees_China\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNION")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" E_Name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Employees_USA\n\n")])])]),a("p",[t._v("结果")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("E_Name")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Zhang, Hua")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Wang, Wei")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Carter, Thomas")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Yang, Ming")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Adams, John")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Bush, George")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Gates, Bill")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("注释：这个命令无法列出在中国和美国的所有雇员。在上面的例子中，我们有两个名字相同的雇员，他们\n当中只有一个人被列出来了。UNION 命令只会选取不同的值。")]),t._v(" "),a("p",[t._v("UNION ALL 命令和 UNION 命令几乎是等效的，不过 UNION ALL 命令会列出所有的值。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" Statement "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALL")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" Statement "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n")])])]),a("p",[t._v("使用 UNION ALL 命令\n实例：\n列出在中国和美国的所有的雇员：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" E_Name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Employees_China\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALL")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" E_Name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Employees_USA\n\n")])])]),a("p",[t._v("结果")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("E_Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Zhang, Hua")])]),t._v(" "),a("tr",[a("td",[t._v("Wang, Wei")])]),t._v(" "),a("tr",[a("td",[t._v("Carter, Thomas")])]),t._v(" "),a("tr",[a("td",[t._v("Yang, Ming")])]),t._v(" "),a("tr",[a("td",[t._v("Adams, John")])]),t._v(" "),a("tr",[a("td",[t._v("Bush, George")])]),t._v(" "),a("tr",[a("td",[t._v("Carter, Thomas")])]),t._v(" "),a("tr",[a("td",[t._v("Gates, Bill")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-select-into"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-select-into"}},[t._v("#")]),t._v(" SQL select into")]),t._v(" "),a("p",[t._v("SQL SELECT INTO 语句可用于创建表的备份复件。")]),t._v(" "),a("p",[t._v("SELECT INTO 语句从一个表中选取数据，然后把数据插入另一个表中。SELECT INTO 语句常用于创建表的备份复件或者用于对记录进行存档。")]),t._v(" "),a("p",[t._v("SQL SELECT INTO 语法\n您可以把所有的列插入新表：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" new_table_name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" externaldatabase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" old_tablename\n\n")])])]),a("p",[t._v("或者只把希望的列插入新表：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" new_table_name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" externaldatabase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" old_tablename\n\n")])])]),a("p",[t._v('SQL SELECT INTO 实例 -制作备份复件\n下面的例子会制作 "Persons" 表的备份复件：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" Persons_backup "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons\n\n")])])]),a("p",[t._v("IN 子句可用于向另一个数据库中拷贝表：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Backup.mdb'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons\n\n")])])]),a("p",[t._v("如果我们希望拷贝某些域，可以在 SELECT 语句后列出这些域：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("FirstNameINTO Persons_backup "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons\n\n")])])]),a("p",[t._v('SQL SELECT INTO 实例 - 带有 WHERE 子句\n我们也可以添加 WHERE 子句。\n下面的例子通过从 "Persons" 表中提取居住在 "Beijing" 的人的信息，创建了一个带有两个列的名为"Persons_backup" 的表：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Firstname "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" Persons_backup\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" City"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Beijing'")]),t._v("\n\n")])])]),a("p",[t._v('SQL SELECT INTO 实例 - 被连接的表从一个以上的表中选取数据也是可以做到的。\n下面的例子会创建一个名为 "Persons_Order_Backup" 的新表，其中包含了从 Persons 和 Orders两个表中取得的信息：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderNo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" Persons_Order_Backup\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id_P\n\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-create-database"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-create-database"}},[t._v("#")]),t._v(" SQL create database")]),t._v(" "),a("p",[t._v("CREATE DATABASE 用于创建数据库。\nSQL CREATE DATABASE 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATABASE")]),t._v(" database_name\n\n")])])]),a("p",[t._v('SQL CREATE DATABASE 实例\n现在我们希望创建一个名为 "my_db" 的数据库。我们使用下面的 CREATE DATABASE 语句：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATABASE")]),t._v(" my_db\n\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-create-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-create-table"}},[t._v("#")]),t._v(" SQL create table")]),t._v(" "),a("p",[t._v("CREATE TABLE 语句用于创建数据库中的表。")]),t._v(" "),a("p",[t._v("SQL CREATE TABLE 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" 表名称\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n列名称 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 数据类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n列名称 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" 数据类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n列名称 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" 数据类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("数据类型（data_type）规定了列可容纳何种数据类型。下面的表格包含了 SQL 中最常用的数据类型：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("integer(size)、int(size)、smallint(size)、tinyint(size)")]),t._v(" "),a("td",[t._v("仅容纳整数。在括号内规定数字的最大位数。")])]),t._v(" "),a("tr",[a("td",[t._v("decimal(size,d)、numeric(size,d)")]),t._v(" "),a("td",[t._v('容纳带有小数的数字。"size" 规定数字的最大位数。"d" 规定小数点右侧的最大位数。')])]),t._v(" "),a("tr",[a("td",[t._v("char(size)")]),t._v(" "),a("td",[t._v("容纳固定长度的字符串（可容纳字母、数字以及特殊字符）。在括号中规定字符串的长度。")])]),t._v(" "),a("tr",[a("td",[t._v("varchar(size)")]),t._v(" "),a("td",[t._v("容纳可变长度的字符串（可容纳字母、数字以及特殊的字符）。在括号中规定字符串的最大长度。")])]),t._v(" "),a("tr",[a("td",[t._v("date(yyyymmdd)")]),t._v(" "),a("td",[t._v("容纳日期。")])])])]),t._v(" "),a("p",[t._v('SQL CREATE TABLE 实例\n本例演示如何创建名为 "Person" 的表。\n该表包含 5 个列，列名分别是："Id_P"、"LastName"、"FirstName"、"Address" 以及 "City"：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nId_P "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nLastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nFirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nAddress "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nCity "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v('Id_P 列的数据类型是 int，包含整数。其余 4 列的数据类型是 varchar，最大长度为 255 个字符。\n空的 "Persons" 表类似这样：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id_P")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td"),t._v(" "),a("td"),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-约束"}},[t._v("#")]),t._v(" SQL 约束")]),t._v(" "),a("p",[t._v("约束用于限制加入表的数据的类型。可以在创建表时规定约束（通过 CREATE TABLE 语句），或者在表创建之后也可以（通过 ALTER TABLE\n语句）。")]),t._v(" "),a("p",[t._v("我们将主要探讨以下几种约束：")]),t._v(" "),a("ul",[a("li",[t._v("NOT NULL")]),t._v(" "),a("li",[t._v("UNIQUE")]),t._v(" "),a("li",[t._v("PRIMARY KEY")]),t._v(" "),a("li",[t._v("FOREIGN KEY")]),t._v(" "),a("li",[t._v("CHECK")]),t._v(" "),a("li",[t._v("DEFAULT")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-not-null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-not-null"}},[t._v("#")]),t._v(" SQL not null")]),t._v(" "),a("p",[t._v("NOT NULL 约束强制列不接受 NULL 值。NOT NULL 约束强制字段始终包含值。这意味着，如果不向字段添加值，就无法插入新纪录或者更新记录。")]),t._v(" "),a("p",[t._v('下面的 SQL 语句强制 "Id_P" 列和 "LastName" 列不接受 NULL 值：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nId_P "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nLastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nFirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nAddress "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nCity "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-unique"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-unique"}},[t._v("#")]),t._v(" SQL unique")]),t._v(" "),a("p",[t._v("UNIQUE 约束唯一标识数据库表中的每条记录。UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。")]),t._v(" "),a("p",[t._v("PRIMARY KEY 拥有自动定义的 UNIQUE 约束。")]),t._v(" "),a("p",[t._v("请注意，每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。")]),t._v(" "),a("p",[t._v("SQL UNIQUE Constraint on CREATE TABLE")]),t._v(" "),a("p",[t._v('下面的 SQL 在 "Persons" 表创建时在 "Id_P" 列创建 UNIQUE 约束：')]),t._v(" "),a("p",[a("strong",[t._v("MySQL:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nId_P "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nLastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nFirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Address "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nCity "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nId_P "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nLastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nFirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nAddress "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nCity "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("如果需要命名 UNIQUE 约束，以及为多个列定义 UNIQUE 约束")]),t._v(" "),a("p",[a("strong",[t._v("MySQL / SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nId_P "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nLastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nFirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nAddress "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nCity "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" uc_PersonID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n")])])]),a("p",[t._v("SQL UNIQUE Constraint on ALTER TABLE")]),t._v(" "),a("p",[t._v('当表已被创建时，如需在 "P_Id" 列创建 UNIQUE 约束')]),t._v(" "),a("p",[t._v("SQL：MySQL / SQL Server / Oracle / MS Access:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("P_Id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束")]),t._v(" "),a("p",[a("strong",[t._v("MySQL / SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" uc_PersonID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("P_Id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("如需撤销 UNIQUE 约束")]),t._v(" "),a("p",[a("strong",[t._v("MySQL:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" uc_PersonID\n\n")])])]),a("p",[a("strong",[t._v("SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" uc_PersonID\n\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-primary-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-primary-key"}},[t._v("#")]),t._v(" SQL primary key")]),t._v(" "),a("p",[t._v("PRIMARY KEY 约束唯一标识数据库表中的每条记录。主键必须包含唯一的值。主键列不能包含 NULL 值。每个表应该都一个主键，并且每个表只能有一个主键。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Constraint")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v("\n\n")])])]),a("p",[t._v('下面的 SQL 在 "Persons" 表创建时在 "Id_P" 列创建 PRIMARY KEY 约束：')]),t._v(" "),a("p",[a("strong",[t._v("MySQL:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nId_P "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nLastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nFirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nAddress "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nCity "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nId_P "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nLastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nFirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nAddress "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nCity "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("如果需要命名 PRIMARY KEY 约束，以及为多个列定义 PRIMARY KEY 约束，请使用下面的 SQL 语\n法：")]),t._v(" "),a("p",[a("strong",[t._v("MySQL / SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nId_P "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nLastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("FirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nAddress "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nCity "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" uc_PersonID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Constraint")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v("\n\n")])])]),a("p",[t._v('如果在表已存在的情况下为 "Id_P" 列创建 PRIMARY KEY 约束')]),t._v(" "),a("p",[a("strong",[t._v("MySQL / SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("如果需要命名 PRIMARY KEY 约束，以及为多个列定义 PRIMARY KEY 约束")]),t._v(" "),a("p",[a("strong",[t._v("MySQL / SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" pk_PersonID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n注释：如果您使用 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" 语句添加主键，必须把主键列声明为不包含 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" 值（在表首次创建时）。\n\n")])])]),a("p",[t._v("撤销 PRIMARY KEY 约束")]),t._v(" "),a("p",[a("strong",[t._v("MySQL:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" PersonsDROP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" pk_PersonID\n\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-foreign-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-foreign-key"}},[t._v("#")]),t._v(" SQL foreign key")]),t._v(" "),a("p",[t._v("一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY。")]),t._v(" "),a("p",[t._v("让我们通过一个例子来解释外键。请看下面两个表：")]),t._v(" "),a("p",[t._v('"Persons" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id_P")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v('"Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id_O")]),t._v(" "),a("th",[t._v("OrderNo")]),t._v(" "),a("th",[t._v("Id_P")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("77895")]),t._v(" "),a("td",[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("44678")]),t._v(" "),a("td",[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("22456")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("24562")]),t._v(" "),a("td",[t._v("1")])])])]),t._v(" "),a("p",[t._v('请注意，"Orders" 中的 "Id_P" 列指向 "Persons" 表中的 "Id_P" 列。"Persons" 表中的 "Id_P" 列是 "Persons" 表中的 PRIMARY KEY。\n"Orders" 表中的 "Id_P" 列是 "Orders" 表中的 FOREIGN KEY。')]),t._v(" "),a("p",[t._v("FOREIGN KEY 约束用于预防破坏表之间连接的动作。\nFOREIGN KEY 约束也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Constraint")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v("\n\n")])])]),a("p",[t._v('下面的 SQL 在 "Orders" 表创建时为 "Id_P" 列创建 FOREIGN KEY：')]),t._v(" "),a("p",[a("strong",[t._v("MySQL:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Orders\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("O_Id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nOrderNo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nId_P "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("O_Id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Orders\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nO_Id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nOrderNo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nId_P "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("如果需要命名 FOREIGN KEY 约束，以及为多个列定义 FOREIGN KEY 约束")]),t._v(" "),a("p",[a("strong",[t._v("MySQL / SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Orders\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nO_Id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nOrderNo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nId_P "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("O_Id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" fk_PerOrders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Constraint")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v("\n\n")])])]),a("p",[t._v('如果在 "Orders" 表已存在的情况下为 "Id_P" 列创建 FOREIGN KEY 约束，请使用下面的 SQL：')]),t._v(" "),a("p",[a("strong",[t._v("MySQL / SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Orders\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Persons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("如果需要命名 FOREIGN KEY 约束，以及为多个列定义 FOREIGN KEY 约束")]),t._v(" "),a("p",[a("strong",[t._v("MySQL / SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ALTER TABLE Orders\nADD CONSTRAINT fk_PerOrders\nFOREIGN KEY (Id_P)\nREFERENCES Persons(Id_P)\n\n")])])]),a("p",[t._v("撤销 FOREIGN KEY 约束")]),t._v(" "),a("p",[t._v("如需撤销 FOREIGN KEY 约束，请使用下面的 SQL：")]),t._v(" "),a("p",[a("strong",[t._v("MySQL:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" fk_PerOrders\n\n")])])]),a("p",[a("strong",[t._v("SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" fk_PerOrders\n\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-check"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-check"}},[t._v("#")]),t._v(" SQL check")]),t._v(" "),a("p",[t._v("CHECK 约束用于限制列中的值的范围。")]),t._v(" "),a("p",[t._v("如果对单个列定义 CHECK 约束，那么该列只允许特定的值。\n如果对一个表定义 CHECK 约束，那么此约束会在特定的列中对值进行限制。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Constraint")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v("\n\n")])])]),a("p",[t._v('下面的 SQL 在 "Persons" 表创建时为 "Id_P" 列创建 CHECK 约束。CHECK 约束规定 "Id_P" 列必须只包含大于 0 的整数。')]),t._v(" "),a("p",[a("strong",[t._v("My SQL:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nId_P "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nLastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nFirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nAddress "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nCity "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("SQL Server / Oracle / MS Access:")]),t._v(" "),a("re",[t._v("\nCREATE TABLE Persons\n(\nId_P int NOT NULL CHECK (Id_P>0),\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255)\n)")])],1),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("如果需要命名 CHECK 约束，以及为多个列定义 CHECK 约束，请使用下面的 SQL 语法：\n\n**MySQL / SQL Server / Oracle / MS Access:**\n​```sql\nCREATE TABLE Persons(\nId_P int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255),\nCONSTRAINT chk_Person CHECK (Id_P>0 AND City='Sandnes')\n)\n\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Constraint")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v("\n\n")])])]),a("p",[t._v('如果在表已存在的情况下为 "Id_P" 列创建 CHECK 约束，请使用下面的 SQL：')]),t._v(" "),a("p",[a("strong",[t._v("MySQL / SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("如果需要命名 CHECK 约束，以及为多个列定义 CHECK 约束，请使用下面的 SQL 语法：")]),t._v(" "),a("p",[a("strong",[t._v("MySQL / SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" chk_Person "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Id_P"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" City"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sandnes'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("撤销 CHECK 约束\n如需撤销 CHECK 约束，请使用下面的 SQL：")]),t._v(" "),a("p",[a("strong",[t._v("SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" chk_Person\n\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-default"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-default"}},[t._v("#")]),t._v(" SQL default")]),t._v(" "),a("p",[t._v("DEFAULT 约束用于向列中插入默认值。\n如果没有规定其他的值，那么会将默认值添加到所有的新纪录。SQL DEFAULT Constraint on CREATE TABLE")]),t._v(" "),a("p",[t._v('下面的 SQL 在 "Persons" 表创建时为 "City" 列创建 DEFAULT 约束：')]),t._v(" "),a("p",[a("strong",[t._v("My SQL / SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nId_P "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nLastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nFirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nAddress "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nCity "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sandnes'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("通过使用类似 GETDATE() 这样的函数，DEFAULT 约束也可以用于插入系统值：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Orders\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nId_O "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nOrderNo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nId_P "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nOrderDate "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("date")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" GETDATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Constraint")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v("\n\n")])])]),a("p",[t._v('如果在表已存在的情况下为 "City" 列创建 DEFAULT 约束，请使用下面的 SQL：')]),t._v(" "),a("p",[a("strong",[t._v("MySQL:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" City "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SANDNES'")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" Server "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" Oracle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" MS Access:\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" City "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SANDNES'")]),t._v("\n\n")])])]),a("p",[t._v("撤销 DEFAULT 约束\n如需撤销 DEFAULT 约束，请使用下面的 SQL：")]),t._v(" "),a("p",[a("strong",[t._v("MySQL:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" City "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("SQL Server / Oracle / MS Access:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" City "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v("\n\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-create-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-create-index"}},[t._v("#")]),t._v(" SQL create index")]),t._v(" "),a("p",[t._v("CREATE INDEX 语句用于在表中创建索引。"),a("br"),t._v("\n在不读取整个表的情况下，索引使数据库应用程序可以更快地查找数据。")]),t._v(" "),a("p",[t._v("索引\n您可以在表中创建索引，以便更加快速高效地查询数据。"),a("br"),t._v("\n用户无法看到索引，它们只能被用来加速搜索/查询。"),a("br"),t._v("\n注释：更新一个包含索引的表需要比更新一个没有索引的表更多的时间，这是由于索引本身也需要更新。"),a("br"),t._v("\n因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。"),a("br"),t._v("\nSQL CREATE INDEX 语法\n在表上创建一个简单的索引。允许使用重复的值：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" index_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 注释："),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"column_name"')]),t._v(" 规定需要索引的列。\n\n")])])]),a("p",[t._v("SQL CREATE UNIQUE INDEX 语法\n在表上创建一个唯一的索引。唯一的索引意味着两个行不能拥有相同的索引值。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" index_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n")])])]),a("p",[t._v('CREATE INDEX 实例\n本例会创建一个简单的索引，名为 "PersonIndex"，在 Person 表的 LastName 列：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" PersonIndex "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Person "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("如果您希望以降序索引某个列中的值，您可以在列名称之后添加保留字 DESC：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" PersonIndex "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Person "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("假如您希望索引不止一个列，您可以在括号中列出这些列的名称，用逗号隔开：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" PersonIndex "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Person "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-drop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-drop"}},[t._v("#")]),t._v(" SQL drop")]),t._v(" "),a("p",[t._v("通过使用 DROP 语句，可以轻松地删除索引、表和数据库。")]),t._v(" "),a("p",[t._v("我们可以使用 DROP INDEX 命令删除表格中的索引。\n用于 Microsoft SQLJet (以及 Microsoft Access) 的语法:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" index_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" table_name用于 MS "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" Server 的语法:\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" table_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index_name\n\n")])])]),a("p",[t._v("用于 IBM DB2 和 Oracle 语法:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" index_name\n\n")])])]),a("p",[t._v("用于 MySQL 的语法:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" index_name\n\n")])])]),a("p",[t._v("SQL DROP TABLE 语句")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" 语句用于删除表（表的结构、属性以及索引也会被删除）：\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" 表名称\n\n")])])]),a("p",[t._v("SQL DROP DATABASE 语句")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATABASE")]),t._v(" 语句用于删除数据库：\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATABASE")]),t._v(" 数据库名称\n\n")])])]),a("p",[t._v("SQL TRUNCATE TABLE 语句")]),t._v(" "),a("p",[t._v("如果我们仅仅需要除去表内的数据，但并不删除表本身，那么我们该如何做呢？\n请使用 TRUNCATE TABLE 命令（仅仅删除表格中的数据）：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRUNCATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" 表名称\n\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-alter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-alter"}},[t._v("#")]),t._v(" SQL alter")]),t._v(" "),a("p",[t._v("ALTER TABLE 语句用于在已有的表中添加、修改或删除列。")]),t._v(" "),a("p",[t._v("如需在表中添加列，请使用下列语法:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" table_nameADD column_name datatype\n\n")])])]),a("p",[t._v("要删除表中的列，请使用下列语法：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" column_name\n\n")])])]),a("p",[t._v("注释：某些数据库系统不允许这种在数据库表中删除列的方式 (DROP COLUMN column_name)。\n要改变表中列的数据类型，请使用下列语法：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" table_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" column_name datatype\n\n")])])]),a("p",[t._v("Persons 表:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v('SQL ALTER TABLE 实例\n现在，我们希望在表 "Persons" 中添加一个名为 "Birthday" 的新列。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" Birthday "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("date")]),t._v("\n\n")])])]),a("p",[t._v('请注意，新列 "Birthday" 的类型是 date，可以存放日期。数据类型规定列中可以存放的数据的类型。\n新的 "Persons" 表类似这样：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")]),t._v(" "),a("th",[t._v("Birthday")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v('改变数据类型实例\n现在我们希望改变 "Persons" 表中 "Birthday" 列的数据类型。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" Birthday "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),t._v("\n\n")])])]),a("p",[t._v('请注意，"Birthday" 列的数据类型是 year，可以存放 2 位或 4 位格式的年份。')]),t._v(" "),a("p",[t._v('接下来，我们删除 "Person" 表中的 "Birthday" 列：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Person "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" Birthday\n\n")])])]),a("p",[t._v("Persons 表会成为这样:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-increment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-increment"}},[t._v("#")]),t._v(" SQL increment")]),t._v(" "),a("p",[t._v("Auto-increment 会在新纪录插入表中时生成一个唯一的数字。")]),t._v(" "),a("p",[t._v("AUTO INCREMENT 字段\n我们通常希望在每次插入新纪录时，自动地创建主键字段的值。我们可以在表中创建一个 auto-increment 字段。"),a("br"),t._v(" "),a("strong",[t._v("用于 MySQL 的语法")])]),t._v(" "),a("p",[t._v('下列 SQL 语句把 "Persons" 表中的 "P_Id" 列定义为 auto-increment 主键：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nP_Id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("LastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nFirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nAddress "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nCity "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("P_Id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("MySQL 使用 AUTO_INCREMENT 关键字来执行 auto-increment 任务。默认地，AUTO_INCREMENT 的开始值是 1，每条新纪录递增 1。")]),t._v(" "),a("p",[t._v("要让 AUTO_INCREMENT 序列以其他的值起始")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n\n")])])]),a("p",[t._v('要在 "Persons" 表中插入新纪录，我们不必为 "P_Id" 列规定值（会自动添加一个唯一的值）：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Bill'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Gates'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v('上面的 SQL 语句会在 "Persons" 表中插入一条新纪录。"P_Id" 会被赋予一个唯一的值。"FirstName"会被设置为 "Bill"，"LastName" 列会被设置为 "Gates"。')]),t._v(" "),a("p",[a("strong",[t._v("用于 SQL Server 的语法")])]),t._v(" "),a("p",[t._v('下列 SQL 语句把 "Persons" 表中的 "P_Id" 列定义为 auto-increment 主键：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nP_Id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("IDENTITY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nLastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nFirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nAddress "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nCity "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("MS SQL 使用 IDENTITY 关键字来执行 auto-increment 任务。")]),t._v(" "),a("p",[t._v('默认地，IDENTITY 的开始值是 1，每条新纪录递增 1。要规定 "P_Id" 列以 20 起始且递增 10，请把 identity 改为 IDENTITY(20,10) 要在 "Persons" 表中插入新纪录，我们不必为 "P_Id" 列规定值（会自动添加一个唯一的值）：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Bill'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Gates'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v('上面的 SQL 语句会在 "Persons" 表中插入一条新纪录。"P_Id" 会被赋予一个唯一的值。"FirstName"会被设置为 "Bill"，"LastName" 列会被设置为 "Gates"。')]),t._v(" "),a("p",[a("strong",[t._v("用于 Access 的语法")])]),t._v(" "),a("p",[t._v('下列 SQL 语句把 "Persons" 表中的 "P_Id" 列定义为 auto-increment 主键：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Persons\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nP_Id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" AUTOINCREMENT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nLastName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nFirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nAddress "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nCity "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v('MS Access 使用 AUTOINCREMENT 关键字来执行 auto-increment 任务。默认地，AUTOINCREMENT 的开始值是 1，每条新纪录递增 1。\n要规定 "P_Id" 列以 20 起始且递增 10，请把 autoincrement 改为 AUTOINCREMENT(20,10) 要在 "Persons" 表中插入新纪录，我们不必为 "P_Id" 列规定值（会自动添加一个唯一的值）：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Bill'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Gates'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v('上面的 SQL 语句会在 "Persons" 表中插入一条新纪录。"P_Id" 会被赋予一个唯一的值。"FirstName"会被设置为 "Bill"，"LastName" 列会被设置为 "Gates"。')]),t._v(" "),a("p",[a("strong",[t._v("用于 Oracle 的语法")])]),t._v(" "),a("p",[t._v("在 Oracle 中，代码稍微复杂一点。您必须通过 sequence 对创建 auto-increment 字段（该对象生成数字序列）。")]),t._v(" "),a("p",[t._v("请使用下面的 CREATE SEQUENCE 语法：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" SEQUENCE seq_person\nMINVALUE "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nINCREMENT "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nCACHE "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n")])])]),a("p",[t._v('上面的代码创建名为 seq_person 的序列对象，它以 1 起始且以 1 递增。该对象缓存 10 个值以提高\n性能。CACHE 选项规定了为了提高访问速度要存储多少个序列值。\n要在 "Persons" 表中插入新纪录，我们必须使用 nextval 函数（该函数从 seq_person 序列中取回下\n一个值）：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("P_Id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("FirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("seq_person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextval"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Lars'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Monsen'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v('上面的 SQL 语句会在 "Persons" 表中插入一条新纪录。"P_Id" 的赋值是来自 seq_person 序列的下一个数字。"FirstName" 会被设置为 "Bill"，"LastName" 列会被设置为 "Gates"。')]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-view"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-view"}},[t._v("#")]),t._v(" SQL view")]),t._v(" "),a("p",[t._v("视图是可视化的表。")]),t._v(" "),a("p",[t._v("SQL CREATE VIEW 语句")]),t._v(" "),a("p",[t._v("什么是视图？")]),t._v(" "),a("p",[t._v("在 SQL 中，视图是基于 SQL 语句的结果集的可视化的表。视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。我们可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，我们也可以提交数据，就像这些来自于某个单一的表。")]),t._v(" "),a("p",[t._v("注释：数据库的设计和结构不会受到视图中的函数、where 或 join 语句的影响。")]),t._v(" "),a("p",[t._v("SQL CREATE VIEW 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" view_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_nameWHERE condition\n\n")])])]),a("p",[t._v("注释：视图总是显示最近的数据。每当用户查询视图时，数据库引擎通过使用 SQL 语句来重建数据。")]),t._v(" "),a("p",[t._v("SQL CREATE VIEW 实例")]),t._v(" "),a("p",[t._v("可以从某个查询内部、某个存储过程内部，或者从另一个视图内部来使用视图。通过向视图添加函数、join等等，我们可以向用户精确地提交我们希望提交的数据。")]),t._v(" "),a("p",[t._v('样本数据库 Northwind 拥有一些被默认安装的视图。视图 "Current Product List" 会从 Products 表列出所有正在使用的产品。这个视图使用下列 SQL 创建：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Current")]),t._v(" Product List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" ASSELECT ProductID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ProductName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Products "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Discontinued"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("No")]),t._v("\n\n")])])]),a("p",[t._v("我们可以查询上面这个视图：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Current")]),t._v(" Product List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),a("p",[t._v("Northwind 样本数据库的另一个视图会选取 Products 表中所有单位价格高于平均单位价格的产品：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Products Above Average Price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ProductName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("UnitPrice "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Products\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" UnitPrice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UnitPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Products"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("我们可以像这样查询上面这个视图：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Products Above Average Price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),a("p",[t._v('另一个来自 Northwind 数据库的视图实例会计算在 1997 年每个种类的销售总数。请注意，这个视图会从另一个名为 "Product Sales for 1997" 的视图那里选取数据：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Category Sales "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1997")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DISTINCT")]),t._v(" CategoryName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ProductSales"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" CategorySales\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Product Sales "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1997")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" CategoryName\n\n")])])]),a("p",[t._v("我们可以像这样查询上面这个视图：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Category Sales "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1997")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),a("p",[t._v('我们也可以向查询添加条件。现在，我们仅仅需要查看 "Beverages" 类的全部销量：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Category Sales "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1997")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" CategoryName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Beverages'")]),t._v("\n\n")])])]),a("p",[t._v("SQL 更新视图\n您可以使用下面的语法来更新视图：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REPLACE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" Syntax "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REPLACE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" view_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" condition\n\n")])])]),a("p",[t._v('现在，我们希望向 "Current Product List" 视图添加 "Category" 列。我们将通过下列 SQL 更新视图：')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Current")]),t._v(" Product List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ProductID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ProductName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Category\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Products "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Discontinued"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("No")]),t._v("\n\n")])])]),a("p",[t._v("SQL 撤销视图\n您可以通过 DROP VIEW 命令来删除视图。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" Syntax "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" view_name\n\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-date"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-date"}},[t._v("#")]),t._v(" SQL date")]),t._v(" "),a("p",[t._v("当我们处理日期时，最难的任务恐怕是确保所插入的日期的格式，与数据库中日期列的格式相匹配。只要数据包含的只是日期部分，运行查询就不会出问题。但是，如果涉及时间，情况就有点复杂了。在讨论日期查询的复杂性之前，我们先来看看最重要的内建日期处理函数。")]),t._v(" "),a("p",[a("strong",[t._v("MySQL Date 函数")]),t._v("\n下面的表格列出了 MySQL 中最重要的内建日期函数：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("函数")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("NOW()")]),t._v(" "),a("td",[t._v("返回当前的日期和时间")])]),t._v(" "),a("tr",[a("td",[t._v("CURDATE()")]),t._v(" "),a("td",[t._v("返回当前的日期")])]),t._v(" "),a("tr",[a("td",[t._v("CURTIME()")]),t._v(" "),a("td",[t._v("返回当前的时间")])]),t._v(" "),a("tr",[a("td",[t._v("DATE()")]),t._v(" "),a("td",[t._v("提取日期或日期/时间表达式的日期部分")])]),t._v(" "),a("tr",[a("td",[t._v("EXTRACT()")]),t._v(" "),a("td",[t._v("返回日期/时间按的单独部分")])]),t._v(" "),a("tr",[a("td",[t._v("DATE_ADD()")]),t._v(" "),a("td",[t._v("给日期添加指定的时间间隔")])]),t._v(" "),a("tr",[a("td",[t._v("DATE_SUB()")]),t._v(" "),a("td",[t._v("从日期减去指定的时间间隔")])]),t._v(" "),a("tr",[a("td",[t._v("DATEDIFF()")]),t._v(" "),a("td",[t._v("返回两个日期之间的天数")])]),t._v(" "),a("tr",[a("td",[t._v("DATE_FORMAT()")]),t._v(" "),a("td",[t._v("用不同的格式显示日期/时间")])])])]),t._v(" "),a("p",[a("strong",[t._v("SQL Server Date 函数")]),t._v("    \t\n下面的表格列出了 SQL Server 中最重要的内建日期函数：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("函数")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("GETDATE()")]),t._v(" "),a("td",[t._v("返回当前日期和时间")])]),t._v(" "),a("tr",[a("td",[t._v("DATEPART()")]),t._v(" "),a("td",[t._v("返回日期/时间的单独部分")])]),t._v(" "),a("tr",[a("td",[t._v("DATEADD()")]),t._v(" "),a("td",[t._v("在日期中添加或减去指定的时间间隔")])]),t._v(" "),a("tr",[a("td",[t._v("DATEDIFF()")]),t._v(" "),a("td",[t._v("返回两个日期之间的时间")])]),t._v(" "),a("tr",[a("td",[t._v("CONVERT()")]),t._v(" "),a("td",[t._v("用不同的格式显示日期/时间")])])])]),t._v(" "),a("p",[a("strong",[t._v("SQL Date 数据类型")]),a("br"),t._v("\nMySQL 使用下列数据类型在数据库中存储日期或日期/时间值：")]),t._v(" "),a("ul",[a("li",[t._v("DATE - 格式 YYYY-MM-DD")]),t._v(" "),a("li",[t._v("DATETIME - 格式: YYYY-MM-DD HH:MM:SS")]),t._v(" "),a("li",[t._v("TIMESTAMP - 格式: YYYY-MM-DD HH:MM:SS")]),t._v(" "),a("li",[t._v("YEAR - 格式 YYYY 或 YYSQL Server")])]),t._v(" "),a("p",[t._v("使用下列数据类型在数据库中存储日期或日期/时间值：")]),t._v(" "),a("ul",[a("li",[t._v("DATE - 格式 YYYY-MM-DD")]),t._v(" "),a("li",[t._v("DATETIME - 格式: YYYY-MM-DD HH:MM:SS")]),t._v(" "),a("li",[t._v("SMALLDATETIME - 格式: YYYY-MM-DD HH:MM:SS")]),t._v(" "),a("li",[t._v("TIMESTAMP - 格式: 唯一的数字")])]),t._v(" "),a("p",[a("strong",[t._v("SQL 日期处理")])]),t._v(" "),a("p",[t._v('如果不涉及时间部分，那么我们可以轻松地比较两个日期！\n假设我们有下面这个 "Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("OrderId")]),t._v(" "),a("th",[t._v("ProductName")]),t._v(" "),a("th",[t._v("OrderDate")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("computer")]),t._v(" "),a("td",[t._v("2008-12-26")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("printer")]),t._v(" "),a("td",[t._v("2008-12-26")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("electrograph")]),t._v(" "),a("td",[t._v("2008-11-12")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("telephone")]),t._v(" "),a("td",[t._v("2008-10-19")])])])]),t._v(" "),a("p",[t._v('现在，我们希望从上表中选取 OrderDate 为 "2008-12-26" 的记录。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" OrderDate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2008-12-26'")]),t._v("\n\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("p",[t._v("OrderId ProductName OrderDate\n-----|------|-----\n1 |computer |2008-12-26\n3 |electrograph |2008-12-26")]),t._v(" "),a("p",[t._v('现在假设 "Orders" 类似这样（请注意 "OrderDate" 列中的时间部分）：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("OrderId")]),t._v(" "),a("th",[t._v("ProductName")]),t._v(" "),a("th",[t._v("OrderDate")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("computer")]),t._v(" "),a("td",[t._v("2008-12-26 16:23:55")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("printer")]),t._v(" "),a("td",[t._v("2008-12-26 10:45:26")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("electrograph")]),t._v(" "),a("td",[t._v("2008-11-12 14:12:08")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("telephone")]),t._v(" "),a("td",[t._v("2008-10-19 12:56:10")])])])]),t._v(" "),a("p",[t._v("如果我们使用上面的 SELECT 语句：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" OrderDate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2008-12-26'")]),t._v("\n\n")])])]),a("p",[t._v("那么我们得不到结果。这是由于该查询不含有时间部分的日期。\n提示：如果您希望使查询简单且更易维护，那么请不要在日期中使用时间部分！")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-null"}},[t._v("#")]),t._v(" SQL NULL")]),t._v(" "),a("p",[t._v("NULL 值是遗漏的未知数据。默认地，表的列可以存放 NULL 值。")]),t._v(" "),a("p",[t._v("SQL NULL 值")]),t._v(" "),a("p",[t._v("如果表中的某个列是可选的，那么我们可以在不向该列添加值的情况下插入新纪录或更新已有的记录。这意味着该字段将以 NULL 值保存。\nNULL 值的处理方式与其他值不同。NULL 用作未知的或不适用的值的占位符。")]),t._v(" "),a("p",[t._v("注释：无法比较 NULL 和 0；它们是不等价的。")]),t._v(" "),a("p",[t._v('SQL 的 NULL 值处理 请看下面的 "Persons" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v('假如 "Persons" 表中的 "Address" 列是可选的。这意味着如果在 "Address" 列插入一条不带值的记\n录，"Address" 列会使用 NULL 值保存。')]),t._v(" "),a("p",[t._v("那么我们如何测试 NULL 值呢？")]),t._v(" "),a("p",[t._v("无法使用比较运算符来测试 NULL 值，比如 =, <, 或者 <>。")]),t._v(" "),a("p",[t._v("我们必须使用 IS NULL 和 IS NOT NULL 操作符。")]),t._v(" "),a("p",[t._v('SQL IS NULL我们如何仅仅选取在 "Address" 列中带有 NULL 值的记录呢？')]),t._v(" "),a("p",[a("strong",[t._v("我们必须使用 IS NULL 操作符：")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("FirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Address "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Address "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("提示：请始终使用 IS NULL 来查找 NULL 值。")]),t._v(" "),a("p",[t._v("SQL IS NOT NULL")]),t._v(" "),a("p",[t._v('我们如何选取在 "Address" 列中不带有 NULL 值的记录呢？')]),t._v(" "),a("p",[a("strong",[t._v("我们必须使用 IS NOT NULL 操作符：")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("FirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Address "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Address "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George Fifth")]),t._v(" "),a("td",[t._v("Avenue")])])])]),t._v(" "),a("p",[t._v("SQL NULL 函数")]),t._v(" "),a("p",[t._v("SQL ISNULL()、NVL()、IFNULL() 和 COALESCE() 函数")]),t._v(" "),a("p",[t._v('请看下面的 "Products" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("P_Id")]),t._v(" "),a("th",[t._v("ProductName")]),t._v(" "),a("th",[t._v("UnitPrice")]),t._v(" "),a("th",[t._v("UnitsInStock")]),t._v(" "),a("th",[t._v("UnitsOnOrder")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("computer")]),t._v(" "),a("td",[t._v("699")]),t._v(" "),a("td",[t._v("25")]),t._v(" "),a("td",[t._v("15")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("printer")]),t._v(" "),a("td",[t._v("365")]),t._v(" "),a("td",[t._v("36")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("telephone")]),t._v(" "),a("td",[t._v("280")]),t._v(" "),a("td",[t._v("159")]),t._v(" "),a("td",[t._v("57")])])])]),t._v(" "),a("p",[t._v('假如 "UnitsOnOrder" 是可选的，而且可以包含 NULL 值。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ProductName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("UnitPrice"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UnitsInStock"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("UnitsOnOrder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Products\n\n")])])]),a("p",[t._v('在上面的例子中，如果有 "UnitsOnOrder" 值是 NULL，那么结果是 NULL。微软的 ISNULL() 函数用于规定如何处理 NULL 值。NVL(), IFNULL() 和 COALESCE() 函数也可以达到相同的结果。\n在这里，我们希望 NULL 值为 0。下面，如果 "UnitsOnOrder" 是 NULL，则不利于计算，因此如果值是 NULL 则 ISNULL() 返回 0。')]),t._v(" "),a("p",[a("strong",[t._v("SQL Server / MS Access")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ProductName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("UnitPrice"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UnitsInStock"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("ISNULL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UnitsOnOrder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Products\n\n")])])]),a("p",[a("strong",[t._v("Oracle")]),t._v("\nOracle 没有 ISNULL() 函数。不过，我们可以使用 NVL() 函数达到相同的结果：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ProductName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("UnitPrice"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UnitsInStock"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("NVL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UnitsOnOrder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Products\n\n")])])]),a("p",[a("strong",[t._v("MySQL")]),t._v("\nMySQL 也拥有类似 ISNULL() 的函数。不过它的工作方式与微软的 ISNULL() 函数有点不同。\n在 MySQL 中，我们可以使用 IFNULL() 函数，就像这样：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ProductName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("UnitPrice"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UnitsInStock"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("IFNULL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UnitsOnOrder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Products\n\n")])])]),a("p",[t._v("或者我们可以使用 COALESCE() 函数，就像这样：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ProductName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("UnitPrice"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UnitsInStock"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COALESCE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UnitsOnOrder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Products\n\n")])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"sql-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-数据类型"}},[t._v("#")]),t._v(" SQL 数据类型")]),t._v(" "),a("h3",{attrs:{id:"microsoft-access-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#microsoft-access-数据类型"}},[t._v("#")]),t._v(" Microsoft Access 数据类型")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("存储")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Text")]),t._v(" "),a("td",[t._v("用于文本或文本与数字的组合。最多 255 个字符。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Memo")]),t._v(" "),a("td",[t._v("Memo 用于更大数量的文本。最多存储 65,536 个字符。注释：无法对 memo 字段进行排序。不过它们是可搜索的。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Byte")]),t._v(" "),a("td",[t._v("允许 0 到 255 的数字。")]),t._v(" "),a("td",[t._v("1 字节")])]),t._v(" "),a("tr",[a("td",[t._v("Integer")]),t._v(" "),a("td",[t._v("允许介于 -32,768 到 32,767 之间的数字。")]),t._v(" "),a("td",[t._v("2 字节")])]),t._v(" "),a("tr",[a("td",[t._v("Long")]),t._v(" "),a("td",[t._v("允许介于 -2,147,483,648 与 2,147,483,647 之间的全部数字")]),t._v(" "),a("td",[t._v("4 字节")])]),t._v(" "),a("tr",[a("td",[t._v("Single")]),t._v(" "),a("td",[t._v("单精度浮点。处理大多数小数。")]),t._v(" "),a("td",[t._v("4 字节")])]),t._v(" "),a("tr",[a("td",[t._v("Double")]),t._v(" "),a("td",[t._v("双精度浮点。处理大多数小数。")]),t._v(" "),a("td",[t._v("8 字节")])]),t._v(" "),a("tr",[a("td",[t._v("Currency")]),t._v(" "),a("td",[t._v("用于货币。支持 15 位的元，外加 4 位小数。提示：您可以选择使用哪个国家的货币。")]),t._v(" "),a("td",[t._v("8 字节")])]),t._v(" "),a("tr",[a("td",[t._v("AutoNumber")]),t._v(" "),a("td",[t._v("AutoNumber 字段自动为每条记录分配数字，通常从 1 开始。")]),t._v(" "),a("td",[t._v("4 字节")])]),t._v(" "),a("tr",[a("td",[t._v("Date/Time")]),t._v(" "),a("td",[t._v("用于日期和时间")]),t._v(" "),a("td",[t._v("8 字节")])]),t._v(" "),a("tr",[a("td",[t._v("Yes/No")]),t._v(" "),a("td",[t._v("逻辑字段，可以显示为 Yes/No、True/False 或 On/Off。在代码中，使用常量 True 和 False （等价于 1 和 0）注释：Yes/No 字段中不允许 Null 值")]),t._v(" "),a("td",[t._v("1 比特")])]),t._v(" "),a("tr",[a("td",[t._v("Ole Object")]),t._v(" "),a("td",[t._v("可以存储图片、音频、视频或其他 BLOBs (Binary Large OBjects)")]),t._v(" "),a("td",[t._v("最 多 1GB")])]),t._v(" "),a("tr",[a("td",[t._v("Hyperlink")]),t._v(" "),a("td",[t._v("包含指向其他文件的链接，包括网页。")]),t._v(" "),a("td",[t._v("4 字节")])]),t._v(" "),a("tr",[a("td",[t._v("Lookup")]),t._v(" "),a("td",[t._v("允许你创建一个可从下列列表中进行选择的选项列表。")]),t._v(" "),a("td",[t._v("4 字节")])]),t._v(" "),a("tr",[a("td",[t._v("Wizard")]),t._v(" "),a("td",[t._v("允许你创建一个可从下列列表中进行选择的选项列表。")]),t._v(" "),a("td",[t._v("4 字节")])])])]),t._v(" "),a("h3",{attrs:{id:"mysql-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-数据类型"}},[t._v("#")]),t._v(" MySQL 数据类型")]),t._v(" "),a("p",[t._v("在 MySQL 中，有三种主要的类型：文本、数字和日期/时间类型。")]),t._v(" "),a("h5",{attrs:{id:"text-类型："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-类型："}},[t._v("#")]),t._v(" Text 类型：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("CHAR(size)")]),t._v(" "),a("td",[t._v("保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。")])]),t._v(" "),a("tr",[a("td",[t._v("VARCHAR(size)")]),t._v(" "),a("td",[t._v("保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。注释：如果值的长度大于 255，则被转换为 TEXT 类型。")])]),t._v(" "),a("tr",[a("td",[t._v("TINYTEXT")]),t._v(" "),a("td",[t._v("存放最大长度为 255 个字符的字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("TEXT")]),t._v(" "),a("td",[t._v("存放最大长度为 65,535 个字符的字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("BLOB")]),t._v(" "),a("td",[t._v("用于 BLOBs (Binary Large OBjects)。存放最多 65,535 字节的数据。")])]),t._v(" "),a("tr",[a("td",[t._v("MEDIUMTEXT")]),t._v(" "),a("td",[t._v("存放最大长度为 16,777,215 个字符的字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("MEDIUMBLOB")]),t._v(" "),a("td",[t._v("用于 BLOBs (Binary Large OBjects)。存放最多 16,777,215 字节的数据。")])]),t._v(" "),a("tr",[a("td",[t._v("LONGTEXT")]),t._v(" "),a("td",[t._v("存放最大长度为 4,294,967,295 个字符的字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("LONGBLOB")]),t._v(" "),a("td",[t._v("用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。")])]),t._v(" "),a("tr",[a("td",[t._v("ENUM(x,y,z,etc.)")]),t._v(" "),a("td",[t._v("允许你输入可能值的列表。可以在 ENUM 列表中列出最大 65535个值。如果列表中不存在插入的值，则插入空值。注释：这些值是按照你输入的顺序存储的。可以按照此格式输入可能的值：ENUM('X','Y','Z')")])]),t._v(" "),a("tr",[a("td",[t._v("SET")]),t._v(" "),a("td",[t._v("与 ENUM 类似，SET 最多只能包含 64 个列表项，不过 SET 可存储一个以上的值。")])])])]),t._v(" "),a("h5",{attrs:{id:"number-类型："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-类型："}},[t._v("#")]),t._v(" Number 类型：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("TINYINT(size)")]),t._v(" "),a("td",[t._v("-128 到 127 常规。0 到 255 无符号。在括号中规定最大位数。")])]),t._v(" "),a("tr",[a("td",[t._v("SMALLINT(size)")]),t._v(" "),a("td",[t._v("-32768 到 32767 常规。0 到 65535 无符号。在括号中规定最大位数。")])]),t._v(" "),a("tr",[a("td",[t._v("MEDIUMINT(size)")]),t._v(" "),a("td",[t._v("-8388608 到 8388607 普通。0 to 16777215 无符号。在括号中规定最大位数。")])]),t._v(" "),a("tr",[a("td",[t._v("INT(size)")]),t._v(" "),a("td",[t._v("-2147483648 到 2147483647 常规。0 到 4294967295 无符号。在括号中规定最大位数。")])]),t._v(" "),a("tr",[a("td",[t._v("BIGINT(size)")]),t._v(" "),a("td",[t._v("-9223372036854775808 到 9223372036854775807 常 规 。 0 到 18446744073709551615 无符号。在括号中规定最大位数。")])]),t._v(" "),a("tr",[a("td",[t._v("FLOAT(size,d)")]),t._v(" "),a("td",[t._v("带有浮动小数点的小数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。")])]),t._v(" "),a("tr",[a("td",[t._v("DOUBLE(size,d)")]),t._v(" "),a("td",[t._v("带有浮动小数点的大数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。")])]),t._v(" "),a("tr",[a("td",[t._v("DECIMAL(size,d)")]),t._v(" "),a("td",[t._v("作为字符串存储的 DOUBLE 类型，允许固定的小数点。")])])])]),t._v(" "),a("p",[t._v("这些整数类型拥有额外的选项 UNSIGNED。通常，整数可以是负数或正数。如果添加 UNSIGNED 属性，那么范围将从 0 开始，而不是某个负数。")]),t._v(" "),a("h5",{attrs:{id:"date-类型："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date-类型："}},[t._v("#")]),t._v(" Date 类型：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("DATE()")]),t._v(" "),a("td",[t._v("日期。格式：YYYY-MM-DD 注释：支持的范围是从 '1000-01-01' 到 '9999-12-31'")])]),t._v(" "),a("tr",[a("td",[t._v("DATETIME()")]),t._v(" "),a("td",[t._v("日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS注释：支持的范围是从 '1000-01-01 00:00:00' 到 '9999-12-31 23:59:59'")])]),t._v(" "),a("tr",[a("td",[t._v("TIMESTAMP()")]),t._v(" "),a("td",[t._v("时间戳。TIMESTAMP 值使用 Unix 纪元('1970-01-01 00:00:00' UTC) 至今的描述来存储。格式：YYYY-MM-DD HH:MM:SS注释：支持的范围是从 '1970-01-01 00:00:01' UTC 到'2038-01-09 03:14:07' UTC")])]),t._v(" "),a("tr",[a("td",[t._v("TIME()")]),t._v(" "),a("td",[t._v("时间。格式：HH:MM:SS 注释：支持的范围是从 '-838:59:59' 到 '838:59:59'")])]),t._v(" "),a("tr",[a("td",[t._v("YEAR()")]),t._v(" "),a("td",[t._v("2 位或 4 位格式的年。注释：4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。")])])])]),t._v(" "),a("p",[t._v("即便 DATETIME 和 TIMESTAMP 返回相同的格式，它们的工作方式很不同。在 INSERT 或UPDATE 查询中，TIMESTAMP 自动把自身设置为当前的日期和时间。TIMESTAMP 也接受不同的格式，比如 YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD 或 YYMMDD。")]),t._v(" "),a("h3",{attrs:{id:"sql-server-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-server-数据类型"}},[t._v("#")]),t._v(" SQL Server 数据类型")]),t._v(" "),a("h5",{attrs:{id:"character-字符串："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#character-字符串："}},[t._v("#")]),t._v(" Character 字符串：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("存储")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("char(n)")]),t._v(" "),a("td",[t._v("固定长度的字符串。最多 8,000 个字符。")]),t._v(" "),a("td",[t._v("n")])]),t._v(" "),a("tr",[a("td",[t._v("varchar(n)")]),t._v(" "),a("td",[t._v("可变长度的字符串。最多 8,000 个字符。")]),t._v(" "),a("td",[t._v("n")])]),t._v(" "),a("tr",[a("td",[t._v("varchar(max)")]),t._v(" "),a("td",[t._v("可变长度的字符串。最多 1,073,741,824 个字符。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("text")]),t._v(" "),a("td",[t._v("可变长度的字符串。最多 2GB 字符数据。")]),t._v(" "),a("td")])])]),t._v(" "),a("h5",{attrs:{id:"unicode-字符串："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unicode-字符串："}},[t._v("#")]),t._v(" Unicode 字符串：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("存储")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("nchar(n)")]),t._v(" "),a("td",[t._v("固定长度的 Unicode 数据。最多 4,000 个字符。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("nvarchar(n)")]),t._v(" "),a("td",[t._v("可变长度的 Unicode 数据。最多 4,000 个字符。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("nvarchar(max)")]),t._v(" "),a("td",[t._v("可变长度的 Unicode 数据。最多 536,870,912 个字符。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("ntext")]),t._v(" "),a("td",[t._v("可变长度的 Unicode 数据。最多 2GB 字符数据")]),t._v(" "),a("td")])])]),t._v(" "),a("h5",{attrs:{id:"binary-类型："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#binary-类型："}},[t._v("#")]),t._v(" Binary 类型：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("存储")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("bit")]),t._v(" "),a("td",[t._v("允许 0、1 或 NULL")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("binary(n)")]),t._v(" "),a("td",[t._v("固定长度的二进制数据。最多 8,000 字节。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("varbinary(n)")]),t._v(" "),a("td",[t._v("可变长度的二进制数据。最多 8,000 字节。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("varbinary(max)")]),t._v(" "),a("td",[t._v("可变长度的二进制数据。最多 2GB 字节。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("image")]),t._v(" "),a("td",[t._v("可变长度的二进制数据。最多 2GB。")]),t._v(" "),a("td")])])]),t._v(" "),a("h5",{attrs:{id:"number-类型：-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-类型：-2"}},[t._v("#")]),t._v(" Number 类型：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("存储")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("tinyint")]),t._v(" "),a("td",[t._v("允许从 0 到 255 的所有数字。")]),t._v(" "),a("td",[t._v("1 字节")])]),t._v(" "),a("tr",[a("td",[t._v("smallint")]),t._v(" "),a("td",[t._v("允许从 -32,768 到 32,767 的所有数字。")]),t._v(" "),a("td",[t._v("2 字节")])]),t._v(" "),a("tr",[a("td",[t._v("int")]),t._v(" "),a("td",[t._v("允许从 -2,147,483,648 到 2,147,483,647 的所有数字。")]),t._v(" "),a("td",[t._v("4 字节")])]),t._v(" "),a("tr",[a("td",[t._v("bigint")]),t._v(" "),a("td",[t._v("允 许 介 于 -9,223,372,036,854,775,808 和9,223,372,036,854,775,807 之间的所有数字。")]),t._v(" "),a("td",[t._v("8 字节")])]),t._v(" "),a("tr",[a("td",[t._v("decimal(p,s)")]),t._v(" "),a("td",[t._v("固定精度和比例的数字。允许从 -10^38 +1 到 10^38 -1 之间的数字。p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p之间的值。默认是 0。")]),t._v(" "),a("td",[t._v("5-17 字节")])]),t._v(" "),a("tr",[a("td",[t._v("numeric(p,s)")]),t._v(" "),a("td",[t._v("固定精度和比例的数字。允许从 -10^38 +1 到 10^38 -1 之间的数字。p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p之间的值。默认是 0。")]),t._v(" "),a("td",[t._v("5-17字节")])]),t._v(" "),a("tr",[a("td",[t._v("smallmoney")]),t._v(" "),a("td",[t._v("介于 -214,748.3648 和 214,748.3647 之间的货币数据。")]),t._v(" "),a("td",[t._v("4 字节")])]),t._v(" "),a("tr",[a("td",[t._v("money")]),t._v(" "),a("td",[t._v("介于 -922,337,203,685,477.5808 和 922,337,203,685,477.5807 之间的货币数据。")]),t._v(" "),a("td",[t._v("8 字节")])]),t._v(" "),a("tr",[a("td",[t._v("float(n)")]),t._v(" "),a("td",[t._v("从 -1.79E + 308 到 1.79E + 308 的浮动精度数字数据。 参数 n 指示该字段保存 4 字节还是 8 字节。float(24) 保存 4 字节，而float(53) 保存 8 字节。n 的默认值是 53。")]),t._v(" "),a("td",[t._v("4 或8 字节")])]),t._v(" "),a("tr",[a("td",[t._v("real")]),t._v(" "),a("td",[t._v("从 -3.40E + 38 到 3.40E + 38 的浮动精度数字数据。")]),t._v(" "),a("td",[t._v("4 字节")])])])]),t._v(" "),a("h5",{attrs:{id:"date-类型：-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date-类型：-2"}},[t._v("#")]),t._v(" Date 类型：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("存储")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("datetime")]),t._v(" "),a("td",[t._v("从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 3.33毫秒。")]),t._v(" "),a("td",[t._v("8 bytes")])]),t._v(" "),a("tr",[a("td",[t._v("datetime2")]),t._v(" "),a("td",[t._v("从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 100纳秒。")]),t._v(" "),a("td",[t._v("6-8 bytes")])]),t._v(" "),a("tr",[a("td",[t._v("smalldatetime")]),t._v(" "),a("td",[t._v("从 1900 年 1 月 1 日 到 2079 年 6 月 6 日，精度为 1 分钟。")]),t._v(" "),a("td",[t._v("4 bytes")])]),t._v(" "),a("tr",[a("td",[t._v("date")]),t._v(" "),a("td",[t._v("仅存储日期。从 0001 年 1 月 1 日 到 9999 年 12 月 31 日。")]),t._v(" "),a("td",[t._v("3 bytes")])]),t._v(" "),a("tr",[a("td",[t._v("time")]),t._v(" "),a("td",[t._v("仅存储时间。精度为 100 纳秒。")]),t._v(" "),a("td",[t._v("3-5 bytes")])]),t._v(" "),a("tr",[a("td",[t._v("datetimeoffset")]),t._v(" "),a("td",[t._v("与 datetime2 相同，外加时区偏移。")]),t._v(" "),a("td",[t._v("8-10 bytes")])]),t._v(" "),a("tr",[a("td",[t._v("timestamp")]),t._v(" "),a("td",[t._v("存储唯一的数字，每当创建或修改某行时，该数字会更新。timestamp基于内部时钟，不对应真实时间。每个表只能有一个 timestamp 变量")]),t._v(" "),a("td")])])]),t._v(" "),a("h5",{attrs:{id:"其他数据类型："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他数据类型："}},[t._v("#")]),t._v(" 其他数据类型：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("sql_variant")]),t._v(" "),a("td",[t._v("存 储 最 多 8,000 字 节不 同 数 据 类 型的 数 据， 除 了 text 、 ntext 以及timestamp。")])]),t._v(" "),a("tr",[a("td",[t._v("uniqueidentifier")]),t._v(" "),a("td",[t._v("存储全局标识符 (GUID)。")])]),t._v(" "),a("tr",[a("td",[t._v("xml")]),t._v(" "),a("td",[t._v("存储 XML 格式化数据。最多 2GB。")])]),t._v(" "),a("tr",[a("td",[t._v("cursor")]),t._v(" "),a("td",[t._v("存储对用于数据库操作的指针的引用。")])]),t._v(" "),a("tr",[a("td",[t._v("table")]),t._v(" "),a("td",[t._v("存储结果集，供稍后处理。")])])])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"sql函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql函数"}},[t._v("#")]),t._v(" SQL函数")]),t._v(" "),a("p",[t._v("SQL 拥有很多可用于计数和计算的内建函数。")]),t._v(" "),a("p",[t._v("内建 SQL 函数的语法是：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表\n")])])]),a("p",[t._v("在 SQL 中，基本的函数类型和种类有若干种。函数的基本类型是：")]),t._v(" "),a("ul",[a("li",[t._v("Aggregate 函数")]),t._v(" "),a("li",[t._v("Scalar 函数")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-aggregate-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-aggregate-functions"}},[t._v("#")]),t._v(" SQL Aggregate functions")]),t._v(" "),a("p",[t._v("Aggregate 函数的操作面向一系列的值，并返回一个单一的值。")]),t._v(" "),a("p",[t._v("注释：如果在 SELECT 语句的项目列表中的众多其它表达式中使用 SELECT 语句，则这个 SELECT 必须使用 GROUP BY 语句！")]),t._v(" "),a("p",[t._v('"Persons" table')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Age")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Adams, John")]),t._v(" "),a("td",[t._v("38")])]),t._v(" "),a("tr",[a("td",[t._v("Bush, George")]),t._v(" "),a("td",[t._v("33")])]),t._v(" "),a("tr",[a("td",[t._v("Carter, Thomas")]),t._v(" "),a("td",[t._v("28")])])])]),t._v(" "),a("p",[a("strong",[t._v("MS Access 中的合计函数")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("函数")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("AVG(column)")]),t._v(" "),a("td",[t._v("返回某列的平均值")])]),t._v(" "),a("tr",[a("td",[t._v("COUNT(column)")]),t._v(" "),a("td",[t._v("返回某列的行数（不包括 NULL 值）")])]),t._v(" "),a("tr",[a("td",[t._v("COUNT(*)")]),t._v(" "),a("td",[t._v("返回被选行数")])]),t._v(" "),a("tr",[a("td",[t._v("FIRST(column)")]),t._v(" "),a("td",[t._v("返回在指定的域中第一个记录的值")])]),t._v(" "),a("tr",[a("td",[t._v("LAST(column)")]),t._v(" "),a("td",[t._v("返回在指定的域中最后一个记录的值")])]),t._v(" "),a("tr",[a("td",[t._v("MAX(column)")]),t._v(" "),a("td",[t._v("返回某列的最高值")])]),t._v(" "),a("tr",[a("td",[t._v("MIN(column)")]),t._v(" "),a("td",[t._v("返回某列的最低值")])]),t._v(" "),a("tr",[a("td",[t._v("STDEV(column)")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("STDEVP(column)")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("SUM(column)")]),t._v(" "),a("td",[t._v("返回某列的总和")])]),t._v(" "),a("tr",[a("td",[t._v("VAR(column)")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("VARP(column)")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[a("strong",[t._v("在 SQL Server 中的合计函数")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("函数")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("AVG(column)")]),t._v(" "),a("td",[t._v("返回某列的行数")])]),t._v(" "),a("tr",[a("td",[t._v("BINARY_CHECKSUM")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("CHECKSUM")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("CHECKSUM_AGG")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("COUNT(column)")]),t._v(" "),a("td",[t._v("返回某列的行数（不包括 NULL 值）")])]),t._v(" "),a("tr",[a("td",[t._v("COUNT(*)")]),t._v(" "),a("td",[t._v("返回被选行数")])]),t._v(" "),a("tr",[a("td",[t._v("COUNT(DISTINCTcolumn)")]),t._v(" "),a("td",[t._v("返回相异结果的数目")])]),t._v(" "),a("tr",[a("td",[t._v("FIRST(column)")]),t._v(" "),a("td",[t._v("返回在指定的域中第一个记录的值（SQLServer2000 不支持）")])]),t._v(" "),a("tr",[a("td",[t._v("LAST(column)")]),t._v(" "),a("td",[t._v("返回在指定的域中最后一个记录的值（SQLServer2000 不支持）")])]),t._v(" "),a("tr",[a("td",[t._v("MAX(column)")]),t._v(" "),a("td",[t._v("返回某列的最高值")])]),t._v(" "),a("tr",[a("td",[t._v("MIN(column)")]),t._v(" "),a("td",[t._v("返回某列的最低值")])]),t._v(" "),a("tr",[a("td",[t._v("STDEV(column)")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("STDEVP(column)")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("SUM(column)")]),t._v(" "),a("td",[t._v("返回某列的总和")])]),t._v(" "),a("tr",[a("td",[t._v("VAR(column)")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("VARP(column)")]),t._v(" "),a("td")])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"scalar-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scalar-函数"}},[t._v("#")]),t._v(" Scalar 函数")]),t._v(" "),a("p",[t._v("Scalar 函数的操作面向某个单一的值，并返回基于输入值的一个单一的值。")]),t._v(" "),a("p",[a("strong",[t._v("MS Access 中的 Scalar 函数")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("函数")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("UCASE(c)")]),t._v(" "),a("td",[t._v("将某个域转换为大写")])]),t._v(" "),a("tr",[a("td",[t._v("LCASE(c)")]),t._v(" "),a("td",[t._v("将某个域转换为小写")])]),t._v(" "),a("tr",[a("td",[t._v("MID(c,start[,end])")]),t._v(" "),a("td",[t._v("从某个文本域提取字符")])]),t._v(" "),a("tr",[a("td",[t._v("LEN(c)")]),t._v(" "),a("td",[t._v("返回某个文本域的长度")])]),t._v(" "),a("tr",[a("td",[t._v("INSTR(c,char)")]),t._v(" "),a("td",[t._v("返回在某个文本域中指定字符的数值位置")])]),t._v(" "),a("tr",[a("td",[t._v("LEFT(c,number_of_char)")]),t._v(" "),a("td",[t._v("返回某个被请求的文本域的左侧部分")])]),t._v(" "),a("tr",[a("td",[t._v("RIGHT(c,number_of_char)")]),t._v(" "),a("td",[t._v("返回某个被请求的文本域的右侧部分")])]),t._v(" "),a("tr",[a("td",[t._v("ROUND(c,decimals)")]),t._v(" "),a("td",[t._v("对某个数值域进行指定小数位数的四舍五入")])]),t._v(" "),a("tr",[a("td",[t._v("MOD(x,y)")]),t._v(" "),a("td",[t._v("返回除法操作的余数")])]),t._v(" "),a("tr",[a("td",[t._v("NOW()")]),t._v(" "),a("td",[t._v("返回当前的系统日期")])]),t._v(" "),a("tr",[a("td",[t._v("FORMAT(c,format)")]),t._v(" "),a("td",[t._v("改变某个域的显示方式")])]),t._v(" "),a("tr",[a("td",[t._v("DATEDIFF(d,date1,date2)")]),t._v(" "),a("td",[t._v("用于执行日期计算")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-avg-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-avg-函数"}},[t._v("#")]),t._v(" SQL AVG 函数")]),t._v(" "),a("p",[t._v("定义和用法")]),t._v(" "),a("p",[t._v("AVG 函数返回数值列的平均值。NULL 值不包括在计算中。")]),t._v(" "),a("p",[t._v("SQL AVG() 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("p",[t._v('"Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("O_Id")]),t._v(" "),a("th",[t._v("OrderDate")]),t._v(" "),a("th",[t._v("OrderPrice")]),t._v(" "),a("th",[t._v("Customer")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2008/12/29")]),t._v(" "),a("td",[t._v("1000")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2008/11/23")]),t._v(" "),a("td",[t._v("1600")]),t._v(" "),a("td",[t._v("Carter")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2008/10/05")]),t._v(" "),a("td",[t._v("700")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("2008/09/28")]),t._v(" "),a("td",[t._v("300")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("2008/08/06")]),t._v(" "),a("td",[t._v("2000")]),t._v(" "),a("td",[t._v("Adams")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("2008/07/21")]),t._v(" "),a("td",[t._v("100")]),t._v(" "),a("td",[t._v("Carter")])])])]),t._v(" "),a("p",[t._v('计算 "OrderPrice" 字段的平均值。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" OrderAverage "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("OrderAverage")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("950")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("找到 OrderPrice 值高于 OrderPrice 平均值的客户。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Customer "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" OrderPrice"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Customer")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Bush")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td")])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-count-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-count-函数"}},[t._v("#")]),t._v(" SQL COUNT() 函数")]),t._v(" "),a("p",[t._v("COUNT() 函数返回匹配指定条件的行数。")]),t._v(" "),a("p",[t._v("SQL COUNT(column_name) 语法")]),t._v(" "),a("p",[t._v("COUNT(column_name) 函数返回指定列的值的数目（NULL 不计入）：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("p",[t._v("SQL COUNT(*) 语法")]),t._v(" "),a("p",[t._v("COUNT(*) 函数返回表中的记录数：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("p",[t._v("SQL COUNT(DISTINCT column_name) 语法\nCOUNT(DISTINCT column_name) 函数返回指定列的不同值的数目：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DISTINCT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n注释："),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DISTINCT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 适用于 ORACLE 和 Microsoft "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" Server，但是无法用于 Microsoft Access。\n")])])]),a("p",[t._v('"Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("O_Id")]),t._v(" "),a("th",[t._v("OrderDate")]),t._v(" "),a("th",[t._v("OrderPrice")]),t._v(" "),a("th",[t._v("Customer")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2008/12/29")]),t._v(" "),a("td",[t._v("1000")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2008/11/23")]),t._v(" "),a("td",[t._v("1600")]),t._v(" "),a("td",[t._v("Carter")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2008/10/05")]),t._v(" "),a("td",[t._v("700")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("2008/09/28")]),t._v(" "),a("td",[t._v("300")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("2008/08/06")]),t._v(" "),a("td",[t._v("2000")]),t._v(" "),a("td",[t._v("Adams")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("2008/07/21")]),t._v(" "),a("td",[t._v("100")]),t._v(" "),a("td",[t._v("Carter")])])])]),t._v(" "),a("p",[t._v('计算客户 "Carter" 的订单数。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" CustomerNilsen "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Customer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Carter'")]),t._v("\n")])])]),a("p",[t._v("以上 SQL 语句的结果是 2，因为客户 Carter 共有 2 个订单：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("CustomerNilsen")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("2")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("如果我们省略 WHERE 子句，比如这样：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" NumberOfOrders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("NumberOfOrders")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("6")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("这是表中的总行数。")]),t._v(" "),a("p",[t._v('现在，我们希望计算 "Orders" 表中不同客户的数目。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DISTINCT")]),t._v(" Customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" NumberOfCustomers "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("NumberOfCustomers")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("3")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v('这是 "Orders" 表中不同客户（Bush, Carter 和 Adams）的数目。')]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-first-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-first-函数"}},[t._v("#")]),t._v(" SQL FIRST() 函数")]),t._v(" "),a("p",[t._v("FIRST() 函数返回指定的字段中第一个记录的值。提示：可使用 ORDER BY 语句对记录进行排序。")]),t._v(" "),a("p",[t._v("SQL FIRST() 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FIRST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("p",[t._v('"Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("O_Id")]),t._v(" "),a("th",[t._v("OrderDate")]),t._v(" "),a("th",[t._v("OrderPrice")]),t._v(" "),a("th",[t._v("Customer")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2008/12/29")]),t._v(" "),a("td",[t._v("1000")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2008/11/23")]),t._v(" "),a("td",[t._v("1600")]),t._v(" "),a("td",[t._v("Carter")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2008/10/05")]),t._v(" "),a("td",[t._v("700")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("2008/09/28")]),t._v(" "),a("td",[t._v("300")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("2008/08/06")]),t._v(" "),a("td",[t._v("2000")]),t._v(" "),a("td",[t._v("Adams")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("2008/07/21")]),t._v(" "),a("td",[t._v("100")]),t._v(" "),a("td",[t._v("Carter")])])])]),t._v(" "),a("p",[t._v('我们希望查找 "OrderPrice" 列的第一个值。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FIRST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" FirstOrderPrice "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("FirstOrderPrice")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1000")]),t._v(" "),a("td")])])]),t._v(" "),a("h3",{attrs:{id:"sql-last-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-last-函数"}},[t._v("#")]),t._v(" SQL LAST() 函数")]),t._v(" "),a("p",[t._v("LAST() 函数返回指定的字段中最后一个记录的值。提示：可使用 ORDER BY 语句对记录进行排序。")]),t._v(" "),a("p",[t._v("SQL LAST() 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LAST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("p",[t._v("SQL LAST() 实例")]),t._v(" "),a("p",[t._v('"Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("O_Id")]),t._v(" "),a("th",[t._v("OrderDate")]),t._v(" "),a("th",[t._v("OrderPrice")]),t._v(" "),a("th",[t._v("Customer")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2008/12/29")]),t._v(" "),a("td",[t._v("1000")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2008/11/23")]),t._v(" "),a("td",[t._v("1600")]),t._v(" "),a("td",[t._v("Carter")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2008/10/05")]),t._v(" "),a("td",[t._v("700")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("2008/09/28")]),t._v(" "),a("td",[t._v("300")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("2008/08/06")]),t._v(" "),a("td",[t._v("2000")]),t._v(" "),a("td",[t._v("Adams")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("2008/07/21")]),t._v(" "),a("td",[t._v("100")]),t._v(" "),a("td",[t._v("Carter")])])])]),t._v(" "),a("p",[t._v('我们希望查找 "OrderPrice" 列的最后一个值。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LAST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" LastOrderPrice "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastOrderPrice")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("100")]),t._v(" "),a("td")])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-max-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-max-函数"}},[t._v("#")]),t._v(" SQL MAX() 函数")]),t._v(" "),a("p",[t._v("MAX 函数返回一列中的最大值。NULL 值不包括在计算中。")]),t._v(" "),a("p",[t._v("SQL MAX() 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n注释：MIN 和 MAX 也可用于文本列，以获得按字母顺序排列的最高或最低值。"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 实例\n")])])]),a("p",[t._v('"Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("O_Id")]),t._v(" "),a("th",[t._v("OrderDate")]),t._v(" "),a("th",[t._v("OrderPrice")]),t._v(" "),a("th",[t._v("Customer")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2008/12/29")]),t._v(" "),a("td",[t._v("1000")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2008/11/23")]),t._v(" "),a("td",[t._v("1600")]),t._v(" "),a("td",[t._v("Carter")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2008/10/05")]),t._v(" "),a("td",[t._v("700")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("2008/09/28")]),t._v(" "),a("td",[t._v("300")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("2008/08/06")]),t._v(" "),a("td",[t._v("2000")]),t._v(" "),a("td",[t._v("Adams")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("2008/07/21")]),t._v(" "),a("td",[t._v("100")]),t._v(" "),a("td",[t._v("Carter")])])])]),t._v(" "),a("p",[t._v('我们希望查找 "OrderPrice" 列的最大值。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" LargestOrderPrice "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LargestOrderPrice")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("2000")]),t._v(" "),a("td")])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-min-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-min-函数"}},[t._v("#")]),t._v(" SQL MIN() 函数")]),t._v(" "),a("p",[t._v("MIN 函数返回一列中的最小值。NULL 值不包括在计算中。")]),t._v(" "),a("p",[t._v("SQL MIN() 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n注释：MIN 和 MAX 也可用于文本列，以获得按字母顺序排列的最高或最低值。\n")])])]),a("p",[t._v('"Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("O_Id")]),t._v(" "),a("th",[t._v("OrderDate")]),t._v(" "),a("th",[t._v("OrderPrice")]),t._v(" "),a("th",[t._v("Customer")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2008/12/29")]),t._v(" "),a("td",[t._v("1000")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2008/11/23")]),t._v(" "),a("td",[t._v("1600")]),t._v(" "),a("td",[t._v("Carter")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2008/10/05")]),t._v(" "),a("td",[t._v("700")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("2008/09/28")]),t._v(" "),a("td",[t._v("300")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("2008/08/06")]),t._v(" "),a("td",[t._v("2000")]),t._v(" "),a("td",[t._v("Adams")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("2008/07/21")]),t._v(" "),a("td",[t._v("100")]),t._v(" "),a("td",[t._v("Carter")])])])]),t._v(" "),a("p",[t._v('"OrderPrice" 列的最小值。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" SmallestOrderPrice "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("SmallestOrderPrice")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("100")]),t._v(" "),a("td")])])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("##SQL SUM() 函数")]),t._v(" "),a("p",[t._v("SUM 函数返回数值列的总数（总额）。")]),t._v(" "),a("p",[t._v("SQL SUM() 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("p",[t._v('"Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("O_Id")]),t._v(" "),a("th",[t._v("OrderDate")]),t._v(" "),a("th",[t._v("OrderPrice")]),t._v(" "),a("th",[t._v("Customer")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2008/12/29")]),t._v(" "),a("td",[t._v("1000")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2008/11/23")]),t._v(" "),a("td",[t._v("1600")]),t._v(" "),a("td",[t._v("Carter")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2008/10/05")]),t._v(" "),a("td",[t._v("700")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("2008/09/28")]),t._v(" "),a("td",[t._v("300")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("2008/08/06")]),t._v(" "),a("td",[t._v("2000")]),t._v(" "),a("td",[t._v("Adams")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("2008/07/21")]),t._v(" "),a("td",[t._v("100")]),t._v(" "),a("td",[t._v("Carter")])])])]),t._v(" "),a("p",[t._v('查找 "OrderPrice" 字段的总数。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" OrderTotal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("OrderTotal")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("5700")]),t._v(" "),a("td")])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-group-by-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-group-by-语句"}},[t._v("#")]),t._v(" SQL GROUP BY 语句")]),t._v(" "),a("p",[t._v("合计函数 (比如 SUM) 常常需要添加 GROUP BY 语句。GROUP BY 语句用于结合合计函数，根据一个或多个列对结果集进行分组。")]),t._v(" "),a("p",[t._v("SQL GROUP BY 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" aggregate_function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" column_name operator "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" column_name\n")])])]),a("p",[t._v('"Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("O_Id")]),t._v(" "),a("th",[t._v("OrderDate")]),t._v(" "),a("th",[t._v("OrderPrice")]),t._v(" "),a("th",[t._v("Customer")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2008/12/29")]),t._v(" "),a("td",[t._v("1000")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2008/11/23")]),t._v(" "),a("td",[t._v("1600")]),t._v(" "),a("td",[t._v("Carter")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2008/10/05")]),t._v(" "),a("td",[t._v("700")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("2008/09/28")]),t._v(" "),a("td",[t._v("300")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("2008/08/06")]),t._v(" "),a("td",[t._v("2000")]),t._v(" "),a("td",[t._v("Adams")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("2008/07/21")]),t._v(" "),a("td",[t._v("100")]),t._v(" "),a("td",[t._v("Carter")])])])]),t._v(" "),a("p",[t._v("查找每个客户的总金额（总订单）。使用 GROUP BY 语句对客户进行组合。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Customer\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Customer")]),t._v(" "),a("th",[t._v("SUM(OrderPrice)")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("2000")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("1700")])]),t._v(" "),a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("2000")])])])]),t._v(" "),a("p",[t._v("让我们看一下如果省略 GROUP BY 会出现什么情况：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Customer")]),t._v(" "),a("th",[t._v("SUM(OrderPrice)")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("5700")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("5700")])]),t._v(" "),a("tr",[a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("5700")])]),t._v(" "),a("tr",[a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("5700")])]),t._v(" "),a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("5700")])]),t._v(" "),a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("5700")])])])]),t._v(" "),a("p",[t._v('上面的结果集不是我们需要的。\n那么为什么不能使用上面这条 SELECT 语句呢？解释如下：上面的 SELECT 语句指定了两列Customer 和 SUM(OrderPrice)）。"SUM(OrderPrice)" 返回一个单独的值（"OrderPrice" 列的\n总计），而 "Customer" 返回 6 个值（每个值对应 "Orders" 表中的每一行）。因此，我们得不到正确的结果。不过，您已经看到了，GROUP BY 语句解决了这个问题。')]),t._v(" "),a("p",[t._v("对一个以上的列应用 GROUP BY 语句")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("OrderDate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("OrderDate\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-having-子句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-having-子句"}},[t._v("#")]),t._v(" SQL HAVING 子句")]),t._v(" "),a("p",[t._v("在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与合计函数一起使用。")]),t._v(" "),a("p",[t._v("SQL HAVING 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" aggregate_function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" column_name operator "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" column_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" aggregate_function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" operator "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),t._v("\n")])])]),a("p",[t._v('"Orders" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("O_Id")]),t._v(" "),a("th",[t._v("OrderDate")]),t._v(" "),a("th",[t._v("OrderPrice")]),t._v(" "),a("th",[t._v("Customer")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("2008/12/29")]),t._v(" "),a("td",[t._v("1000")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("2008/11/23")]),t._v(" "),a("td",[t._v("1600")]),t._v(" "),a("td",[t._v("Carter")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("2008/10/05")]),t._v(" "),a("td",[t._v("700")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("2008/09/28")]),t._v(" "),a("td",[t._v("300")]),t._v(" "),a("td",[t._v("Bush")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("2008/08/06")]),t._v(" "),a("td",[t._v("2000")]),t._v(" "),a("td",[t._v("Adams")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("2008/07/21")]),t._v(" "),a("td",[t._v("100")]),t._v(" "),a("td",[t._v("Carter")])])])]),t._v(" "),a("p",[t._v("查找订单总金额少于 2000 的客户。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Customer\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),t._v("\n")])])]),a("p",[t._v("结果集类似：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Customer")]),t._v(" "),a("th",[t._v("SUM(OrderPrice)")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("1700")])])])]),t._v(" "),a("p",[t._v('查找客户 "Bush" 或 "Adams" 拥有超过 1500 的订单总金额。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Orders\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Customer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Bush'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" Customer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Adams'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Customer\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1500")]),t._v("\n")])])]),a("p",[t._v("结果集：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Customer")]),t._v(" "),a("th",[t._v("SUM(OrderPrice)")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("2000")])]),t._v(" "),a("tr",[a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("2000")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-ucase-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-ucase-函数"}},[t._v("#")]),t._v(" SQL UCASE() 函数")]),t._v(" "),a("p",[t._v("UCASE() 函数UCASE 函数把字段的值转换为大写。")]),t._v(" "),a("p",[t._v("SQL UCASE() 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UCASE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("p",[t._v('"Persons" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v('选取 "LastName" 和 "FirstName" 列的内容，然后把 "LastName" 列转换为大写。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UCASE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("FirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("ADAMS")]),t._v(" "),a("td",[t._v("John")])]),t._v(" "),a("tr",[a("td",[t._v("BUSH")]),t._v(" "),a("td",[t._v("George")])]),t._v(" "),a("tr",[a("td",[t._v("CARTER")]),t._v(" "),a("td",[t._v("Thomas")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-lcase-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-lcase-函数"}},[t._v("#")]),t._v(" SQL LCASE() 函数")]),t._v(" "),a("p",[t._v("LCASE 函数把字段的值转换为小写。")]),t._v(" "),a("p",[t._v("SQL LCASE() 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LCASE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("p",[t._v('"Persons" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v('选取 "LastName" 和 "FirstName" 列的内容，然后把 "LastName" 列转换为小写。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LCASE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("FirstName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("adams")]),t._v(" "),a("td",[t._v("John")])]),t._v(" "),a("tr",[a("td",[t._v("bush")]),t._v(" "),a("td",[t._v("George")])]),t._v(" "),a("tr",[a("td",[t._v("carter")]),t._v(" "),a("td",[t._v("Thomas")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-mid-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-mid-函数"}},[t._v("#")]),t._v(" SQL MID() 函数")]),t._v(" "),a("p",[t._v("MID 函数用于从文本字段中提取字符。")]),t._v(" "),a("p",[t._v("SQL MID() 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("参数")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("column_name")]),t._v(" "),a("td",[t._v("必需。要提取字符的字段。")])]),t._v(" "),a("tr",[a("td",[t._v("start")]),t._v(" "),a("td",[t._v("必需。规定开始位置（起始值是 1）。")])]),t._v(" "),a("tr",[a("td",[t._v("length")]),t._v(" "),a("td",[t._v("可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。")])])])]),t._v(" "),a("p",[t._v('"Persons" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v('从 "City" 列中提取前 3 个字符。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("City"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" SmallCity "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("SmallCity")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Lon")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("New")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Bei")]),t._v(" "),a("td")])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-len-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-len-函数"}},[t._v("#")]),t._v(" SQL LEN() 函数")]),t._v(" "),a("p",[t._v("LEN 函数返回文本字段中值的长度。")]),t._v(" "),a("p",[t._v("SQL LEN() 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("p",[t._v('"Persons" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Id")]),t._v(" "),a("th",[t._v("LastName")]),t._v(" "),a("th",[t._v("FirstName")]),t._v(" "),a("th",[t._v("Address")]),t._v(" "),a("th",[t._v("City")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Adams")]),t._v(" "),a("td",[t._v("John")]),t._v(" "),a("td",[t._v("Oxford Street")]),t._v(" "),a("td",[t._v("London")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Bush")]),t._v(" "),a("td",[t._v("George")]),t._v(" "),a("td",[t._v("Fifth Avenue")]),t._v(" "),a("td",[t._v("New York")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("Carter")]),t._v(" "),a("td",[t._v("Thomas")]),t._v(" "),a("td",[t._v("Changan Street")]),t._v(" "),a("td",[t._v("Beijing")])])])]),t._v(" "),a("p",[t._v('取得 "City" 列中值的长度。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("City"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" LengthOfAddress "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Persons\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("LengthOfCity")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("6")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("7")]),t._v(" "),a("td")])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-round-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-round-函数"}},[t._v("#")]),t._v(" SQL ROUND() 函数")]),t._v(" "),a("p",[t._v("ROUND 函数用于把数值字段舍入为指定的小数位数。")]),t._v(" "),a("p",[t._v("SQL ROUND() 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ROUND")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("decimals"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("参数")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("column_name")]),t._v(" "),a("td",[t._v("必需。要舍入的字段。")])]),t._v(" "),a("tr",[a("td",[t._v("decimals")]),t._v(" "),a("td",[t._v("必需。规定要返回的小数位数。")])])])]),t._v(" "),a("p",[t._v('"Products" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Prod_Id")]),t._v(" "),a("th",[t._v("ProductName")]),t._v(" "),a("th",[t._v("Unit")]),t._v(" "),a("th",[t._v("UnitPrice")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("gold")]),t._v(" "),a("td",[t._v("1000 g")]),t._v(" "),a("td",[t._v("32.35")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("silver")]),t._v(" "),a("td",[t._v("000 g")]),t._v(" "),a("td",[t._v("11.56")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("copper")]),t._v(" "),a("td",[t._v("1000 g")]),t._v(" "),a("td",[t._v("6.85")])])])]),t._v(" "),a("p",[t._v("把名称和价格舍入为最接近的整数。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ProductName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ROUND")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UnitPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" UnitPrice "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Products\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("ProductName")]),t._v(" "),a("th",[t._v("UnitPrice")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("gold")]),t._v(" "),a("td",[t._v("32")])]),t._v(" "),a("tr",[a("td",[t._v("silver")]),t._v(" "),a("td",[t._v("12")])]),t._v(" "),a("tr",[a("td",[t._v("copper")]),t._v(" "),a("td",[t._v("7")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-now-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-now-函数"}},[t._v("#")]),t._v(" SQL NOW() 函数")]),t._v(" "),a("p",[t._v("NOW 函数返回当前的日期和时间。")]),t._v(" "),a("p",[t._v("SQL NOW() 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOW")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("p",[t._v('"Products" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Prod_Id")]),t._v(" "),a("th",[t._v("ProductName")]),t._v(" "),a("th",[t._v("Unit")]),t._v(" "),a("th",[t._v("UnitPrice")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("gold")]),t._v(" "),a("td",[t._v("1000 g")]),t._v(" "),a("td",[t._v("32.35")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("silver")]),t._v(" "),a("td",[t._v("000 g")]),t._v(" "),a("td",[t._v("11.56")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("copper")]),t._v(" "),a("td",[t._v("1000 g")]),t._v(" "),a("td",[t._v("6.85")])])])]),t._v(" "),a("p",[t._v("显示当天的日期所对应的名称和价格。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ProductName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" UnitPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" PerDate "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Products\n")])])]),a("p",[t._v("结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("ProductName")]),t._v(" "),a("th",[t._v("UnitPrice")]),t._v(" "),a("th",[t._v("PerDate")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("gold")]),t._v(" "),a("td",[t._v("32.35")]),t._v(" "),a("td",[t._v("12/29/2008 11:36:05 AM")])]),t._v(" "),a("tr",[a("td",[t._v("silver")]),t._v(" "),a("td",[t._v("11.56")]),t._v(" "),a("td",[t._v("12/29/2008 11:36:05 AM")])]),t._v(" "),a("tr",[a("td",[t._v("copper")]),t._v(" "),a("td",[t._v("6.85")]),t._v(" "),a("td",[t._v("12/29/2008 11:36:05 AM")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"sql-format-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-format-函数"}},[t._v("#")]),t._v(" SQL FORMAT() 函数")]),t._v(" "),a("p",[t._v("FORMAT 函数用于对字段的显示进行格式化。")]),t._v(" "),a("p",[t._v("SQL FORMAT() 语法")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("参数")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("column_name")]),t._v(" "),a("td",[t._v("必需。要格式化的字段。")])]),t._v(" "),a("tr",[a("td",[t._v("format")]),t._v(" "),a("td",[t._v("必需。规定格式。")])])])]),t._v(" "),a("p",[t._v('"Products" 表：')]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Prod_Id")]),t._v(" "),a("th",[t._v("ProductName")]),t._v(" "),a("th",[t._v("Unit")]),t._v(" "),a("th",[t._v("UnitPrice")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("gold")]),t._v(" "),a("td",[t._v("1000 g")]),t._v(" "),a("td",[t._v("32.35")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("silver")]),t._v(" "),a("td",[t._v("000 g")]),t._v(" "),a("td",[t._v("11.56")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("copper")]),t._v(" "),a("td",[t._v("1000 g")]),t._v(" "),a("td",[t._v("6.85")])])])]),t._v(" "),a("p",[t._v('显示每天日期所对应的名称和价格（日期的显示格式是 "YYYY-MM-DD"）。')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ProductName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" UnitPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'YYYY-MM-DD'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" PerDate\n")])])]),a("p",[t._v("FROM Products结果集类似这样：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("ProductName")]),t._v(" "),a("th",[t._v("UnitPrice")]),t._v(" "),a("th",[t._v("PerDate")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("gold")]),t._v(" "),a("td",[t._v("32.35")]),t._v(" "),a("td",[t._v("12/29/2008")])]),t._v(" "),a("tr",[a("td",[t._v("silver")]),t._v(" "),a("td",[t._v("11.56")]),t._v(" "),a("td",[t._v("12/29/2008")])]),t._v(" "),a("tr",[a("td",[t._v("copper")]),t._v(" "),a("td",[t._v("6.85")]),t._v(" "),a("td",[t._v("12/29/2008")])])])]),t._v(" "),a("hr"),t._v(" "),a("Valine")],1)}),[],!1,null,null,null);s.default=_.exports}}]);